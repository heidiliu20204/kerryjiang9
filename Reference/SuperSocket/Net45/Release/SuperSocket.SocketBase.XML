<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SuperSocket.SocketBase</name>
    </assembly>
    <members>
        <member name="T:SuperSocket.SocketBase.AppContext">
            <summary>
            The application context
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.AppContext.CurrentSession">
            <summary>
            Gets the current session from thread context.
            </summary>
            <value>
            The current session.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.AppContext.CurrentServer">
            <summary>
            Gets the current server from thread context.
            </summary>
            <value>
            The current server.
            </value>
        </member>
        <member name="T:SuperSocket.SocketBase.AppServer`3">
            <summary>
            AppServer base class
            </summary>
            <typeparam name="TAppSession">The type of the app session.</typeparam>
            <typeparam name="TPackageInfo">The type of the request info.</typeparam>
            <typeparam name="TKey">The type of the package key.</typeparam>
        </member>
        <member name="T:SuperSocket.SocketBase.IAppServer`2">
            <summary>
            The interface for AppServer
            </summary>
            <typeparam name="TAppSession">The type of the app session.</typeparam>
            <typeparam name="TPackageInfo">The type of the request info.</typeparam>
        </member>
        <member name="T:SuperSocket.SocketBase.IAppServer`1">
            <summary>
            The interface for AppServer
            </summary>
            <typeparam name="TAppSession">The type of the app session.</typeparam>
        </member>
        <member name="T:SuperSocket.SocketBase.IAppServer">
            <summary>
            The interface for AppServer
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.IManagedApp">
            <summary>
            An item can be started and stopped
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.IManagedAppBase">
            <summary>
            An item can be started and stopped
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.IStatusInfoSource">
            <summary>
            StatusInfo source interface
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.IStatusInfoSource.CollectServerStatus(SuperSocket.SocketBase.StatusInfoCollection)">
            <summary>
            Collects the bootstrap status.
            </summary>
            <param name="bootstrapStatus">The bootstrap status.</param>
            <returns></returns>
        </member>
        <member name="T:SuperSocket.SocketBase.IServerMetadataProvider">
            <summary>
            Server metadata provder interface
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.IServerMetadataProvider.GetAppServerMetadata">
            <summary>
            Gets the application server metadata.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SuperSocket.SocketBase.ISystemEndPoint">
            <summary>
            The interface for endpoint who can send/receive system message with each other
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.ISystemEndPoint.TransferSystemMessage(System.String,System.Object)">
            <summary>
            Transfers the system message.
            </summary>
            <param name="messageType">Type of the message.</param>
            <param name="messageData">The message data.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.IManagedAppBase.Start">
            <summary>
            Starts this server instance.
            </summary>
            <returns>return true if start successfull, else false</returns>
        </member>
        <member name="M:SuperSocket.SocketBase.IManagedAppBase.ReportPotentialConfigChange(SuperSocket.SocketBase.Config.IServerConfig)">
            <summary>
            Reports the potential configuration change.
            </summary>
            <param name="config">The server config which may be changed.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.IManagedAppBase.Stop">
            <summary>
            Stops this server instance.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.IManagedAppBase.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.IManagedAppBase.SessionCount">
            <summary>
            Gets the total session count.
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.IManagedApp.Setup(SuperSocket.SocketBase.IBootstrap,SuperSocket.SocketBase.Config.IServerConfig)">
            <summary>
            Setups with bootstrap and server config.
            </summary>
            <param name="bootstrap">The bootstrap.</param>
            <param name="config">The socket server instance config.</param>
            <returns></returns>
        </member>
        <member name="P:SuperSocket.SocketBase.IManagedApp.State">
            <summary>
            Gets the current state of the work item.
            </summary>
            <value>
            The state.
            </value>
        </member>
        <member name="T:SuperSocket.SocketBase.ILoggerProvider">
            <summary>
            The interface for who provides logger
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.ILoggerProvider.Logger">
            <summary>
            Gets the logger assosiated with this object.
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.IAppServer.CreateAppSession(SuperSocket.SocketBase.ISocketSession)">
            <summary>
            Creates the app session.
            </summary>
            <param name="socketSession">The socket session.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.IAppServer.RegisterSession(SuperSocket.SocketBase.IAppSession)">
            <summary>
            Registers the new created app session into the appserver's session container.
            </summary>
            <param name="session">The session.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.IAppServer.GetSessionByID(System.String)">
            <summary>
            Gets the app session by ID.
            </summary>
            <param name="sessionID">The session ID.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.IAppServer.ResetSessionSecurity(SuperSocket.SocketBase.IAppSession,System.Security.Authentication.SslProtocols)">
            <summary>
            Resets the session's security protocol.
            </summary>
            <param name="session">The session.</param>
            <param name="security">The security protocol.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.IAppServer.GetService``1">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <typeparam name="T">the type of service object to get</typeparam>
            <returns>A service object of type T</returns>
        </member>
        <member name="M:SuperSocket.SocketBase.IAppServer.RegisterService``1(``0)">
            <summary>
            Registers the service instance.
            </summary>
            <typeparam name="T">the service instance's type</typeparam>
            <param name="serviceInstance">The service instance.</param>
        </member>
        <member name="P:SuperSocket.SocketBase.IAppServer.StartedTime">
            <summary>
            Gets the started time.
            </summary>
            <value>
            The started time.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.IAppServer.Listeners">
            <summary>
            Gets or sets the listeners.
            </summary>
            <value>
            The listeners.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.IAppServer.ReceiveFilterFactory">
            <summary>
            Gets the Receive filter factory.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.IAppServer.Config">
            <summary>
            Gets the server's config.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.IAppServer.Certificate">
            <summary>
            Gets the certificate of current server.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.IAppServer.BasicSecurity">
            <summary>
            Gets the transfer layer security protocol.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.IAppServer.LogFactory">
            <summary>
            Gets the log factory.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.IAppServer.BufferManager">
            <summary>
            Gets the buffer manager.
            </summary>
            <value>
            The buffer manager.
            </value>
        </member>
        <member name="E:SuperSocket.SocketBase.IAppServer.NewRequestReceived">
            <summary>
            Occurs when [new request received].
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.IAppServer`1.GetSessions(System.Func{`0,System.Boolean})">
            <summary>
            Gets the matched sessions from sessions snapshot.
            </summary>
            <param name="critera">The prediction critera.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.IAppServer`1.GetAllSessions">
            <summary>
            Gets all sessions in sessions snapshot.
            </summary>
            <returns></returns>
        </member>
        <member name="E:SuperSocket.SocketBase.IAppServer`1.NewSessionConnected">
            <summary>
            Gets/sets the new session connected event handler.
            </summary>
        </member>
        <member name="E:SuperSocket.SocketBase.IAppServer`1.SessionClosed">
            <summary>
            Gets/sets the session closed event handler.
            </summary>
        </member>
        <member name="E:SuperSocket.SocketBase.IAppServer`2.NewRequestReceived">
            <summary>
            Occurs when [request comming].
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.IRawDataProcessor`1">
            <summary>
            The raw data processor
            </summary>
            <typeparam name="TAppSession">The type of the app session.</typeparam>
        </member>
        <member name="E:SuperSocket.SocketBase.IRawDataProcessor`1.RawDataReceived">
            <summary>
            Gets or sets the raw binary data received event handler.
            TAppSession: session
            byte[]: receive buffer
            int: receive buffer offset
            int: receive lenght
            bool: whether process the received data further
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.IRequestHandler`1">
            <summary>
            The interface for handler of session request
            </summary>
            <typeparam name="TPackageInfo">The type of the request info.</typeparam>
        </member>
        <member name="M:SuperSocket.SocketBase.IRequestHandler`1.ExecuteCommand(SuperSocket.SocketBase.IAppSession,`0)">
            <summary>
            Executes the command.
            </summary>
            <param name="session">The session.</param>
            <param name="requestInfo">The request info.</param>
        </member>
        <member name="T:SuperSocket.SocketBase.ISocketServerAccessor">
            <summary>
            SocketServer Accessor interface
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.ISocketServerAccessor.SocketServer">
            <summary>
            Gets the socket server.
            </summary>
            <value>
            The socket server.
            </value>
        </member>
        <member name="T:SuperSocket.SocketBase.IRemoteCertificateValidator">
            <summary>
            The basic interface for RemoteCertificateValidator
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.IRemoteCertificateValidator.Validate(SuperSocket.SocketBase.IAppSession,System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Validates the remote certificate
            </summary>
            <param name="session">The session.</param>
            <param name="sender">The sender.</param>
            <param name="certificate">The certificate.</param>
            <param name="chain">The chain.</param>
            <param name="sslPolicyErrors">The SSL policy errors.</param>
            <returns></returns>
        </member>
        <member name="T:SuperSocket.SocketBase.IActiveConnector">
            <summary>
            The inerface to connect the remote endpoint actively
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.IActiveConnector.ActiveConnect(System.Net.EndPoint)">
            <summary>
            Connect the target endpoint actively.
            </summary>
            <param name="targetEndPoint">The target end point.</param>
            <returns></returns>
        </member>
        <member name="T:SuperSocket.SocketBase.ISessionRegister">
            <summary>
            Session register interface
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.ISessionRegister.RegisterSession(SuperSocket.SocketBase.IAppSession)">
            <summary>
            Tries the register session.
            </summary>
            <param name="session">The session.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.RegisterConfigHandler``1(SuperSocket.SocketBase.Config.IServerConfig,System.String,System.Func{``0,System.Boolean})">
            <summary>
            Registers the configuration option value handler, it is used for reading configuration value and reload it after the configuration is changed;
            </summary>
            <typeparam name="TConfigOption">The type of the configuration option.</typeparam>
            <param name="config">The server configuration.</param>
            <param name="name">The changed config option's name.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.RegisterConfigHandler(SuperSocket.SocketBase.Config.IServerConfig,System.String,System.Func{System.String,System.Boolean})">
            <summary>
            Registers the configuration option value handler, it is used for reading configuration value and reload it after the configuration is changed;
            </summary>
            <param name="config">The server configuration.</param>
            <param name="name">The changed config option name.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="F:SuperSocket.SocketBase.AppServer`3.NullAppSession">
            <summary>
            Null appSession instance
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.AppServer`3.m_StateCode">
            <summary>
            the current state's code
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.AppServer`3.m_RequestExecutingContextPool">
            <summary>
            The object pool for request executing context
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.AppServer`2"/> class.
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.#ctor(SuperSocket.SocketBase.Protocol.IReceiveFilterFactory{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.AppServer`2"/> class.
            </summary>
            <param name="receiveFilterFactory">The Receive filter factory.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.GetCommandFilterAttributes(System.Type)">
            <summary>
            Gets the filter attributes.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.SetupCommands(System.Collections.Generic.Dictionary{System.String,SuperSocket.SocketBase.Command.ICommand{`0,`1}})">
            <summary>
            Setups the command into command dictionary
            </summary>
            <param name="discoveredCommands">The discovered commands.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.GetCompositionContainer(SuperSocket.SocketBase.Config.IServerConfig)">
            <summary>
            Gets the composition container.
            </summary>
            <param name="config">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.Setup(SuperSocket.SocketBase.Config.IRootConfig,SuperSocket.SocketBase.Config.IServerConfig)">
            <summary>
            Setups with the specified configurations.
            </summary>
            <param name="rootConfig">The root configuration.</param>
            <param name="config">The server configuration.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.Setup(SuperSocket.SocketBase.Config.IRootConfig,SuperSocket.SocketBase.Config.IServerConfig,System.ComponentModel.Composition.Hosting.ExportProvider)">
            <summary>
            Setups with the specified configurations.
            </summary>
            <param name="rootConfig">The root configuration.</param>
            <param name="config">The configuration.</param>
            <param name="exportProvier">The composition export provier.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.RegisterCompositeTarget(System.Collections.Generic.IList{SuperSocket.SocketBase.ICompositeTarget})">
            <summary>
            Registers the composite targets.
            </summary>
            <param name="targets">The targets.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.Setup(System.Int32)">
            <summary>
            Setups with the specified port.
            </summary>
            <param name="port">The port.</param>
            <returns>return setup result</returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.Setup(SuperSocket.SocketBase.Config.IServerConfig,SuperSocket.SocketBase.Protocol.IReceiveFilterFactory{`1},AnyLog.ILogFactory,System.Collections.Generic.IEnumerable{SuperSocket.SocketBase.IConnectionFilter},System.Collections.Generic.IEnumerable{SuperSocket.SocketBase.Command.ICommandLoader{SuperSocket.SocketBase.Command.ICommand{`0,`1}}})">
            <summary>
            Setups with the specified config.
            </summary>
            <param name="config">The server config.</param>
            <param name="receiveFilterFactory">The receive filter factory.</param>
            <param name="logFactory">The log factory.</param>
            <param name="connectionFilters">The connection filters.</param>
            <param name="commandLoaders">The command loaders.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.Setup(SuperSocket.SocketBase.Config.IRootConfig,SuperSocket.SocketBase.Config.IServerConfig,SuperSocket.SocketBase.Protocol.IReceiveFilterFactory{`1},AnyLog.ILogFactory,System.Collections.Generic.IEnumerable{SuperSocket.SocketBase.IConnectionFilter},System.Collections.Generic.IEnumerable{SuperSocket.SocketBase.Command.ICommandLoader{SuperSocket.SocketBase.Command.ICommand{`0,`1}}})">
            <summary>
            Setups the specified root config, this method used for programming setup
            </summary>
            <param name="rootConfig">The root config.</param>
            <param name="config">The server config.</param>
            <param name="receiveFilterFactory">The Receive filter factory.</param>
            <param name="logFactory">The log factory.</param>
            <param name="connectionFilters">The connection filters.</param>
            <param name="commandLoaders">The command loaders.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.Setup(System.String,System.Int32,SuperSocket.SocketBase.Protocol.IReceiveFilterFactory{`1},AnyLog.ILogFactory,System.Collections.Generic.IEnumerable{SuperSocket.SocketBase.IConnectionFilter},System.Collections.Generic.IEnumerable{SuperSocket.SocketBase.Command.ICommandLoader{SuperSocket.SocketBase.Command.ICommand{`0,`1}}})">
            <summary>
            Setups with the specified ip and port.
            </summary>
            <param name="ip">The ip.</param>
            <param name="port">The port.</param>
            <param name="receiveFilterFactory">The Receive filter factory.</param>
            <param name="logFactory">The log factory.</param>
            <param name="connectionFilters">The connection filters.</param>
            <param name="commandLoaders">The command loaders.</param>
            <returns>return setup result</returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.SuperSocket#SocketBase#IManagedApp#Setup(SuperSocket.SocketBase.IBootstrap,SuperSocket.SocketBase.Config.IServerConfig)">
            <summary>
            Setups with bootstrap and server config.
            </summary>
            <param name="bootstrap">The bootstrap.</param>
            <param name="config">The socket server instance config.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            bootstrap
            or
            factories
            </exception>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.SetupCommandLoaders(System.Collections.Generic.List{SuperSocket.SocketBase.Command.ICommandLoader{SuperSocket.SocketBase.Command.ICommand{`0,`1}}})">
            <summary>
            Setups the command loaders.
            </summary>
            <param name="commandLoaders">The command loaders.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.CreateLogger(System.String)">
            <summary>
            Creates the logger for the AppServer.
            </summary>
            <param name="loggerName">Name of the logger.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.SetupSecurity(SuperSocket.SocketBase.Config.IServerConfig)">
            <summary>
            Setups the security option of socket communications.
            </summary>
            <param name="config">The config of the server instance.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.GetCertificate(SuperSocket.SocketBase.Config.ICertificateConfig)">
            <summary>
            Gets the certificate from server configuguration.
            </summary>
            <param name="certificate">The certificate config.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.ValidateClientCertificate(`0,System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Validates the client certificate. This method is only used if the certificate configuration attribute "clientCertificateRequired" is true.
            </summary>
            <param name="session">The session.</param>
            <param name="sender">The sender.</param>
            <param name="certificate">The certificate.</param>
            <param name="chain">The chain.</param>
            <param name="sslPolicyErrors">The SSL policy errors.</param>
            <returns>return the validation result</returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.SetupSocketServer">
            <summary>
            Setups the socket server.instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.SetupListeners(SuperSocket.SocketBase.Config.IServerConfig)">
            <summary>
            Setups the listeners base on server configuration
            </summary>
            <param name="config">The config.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.Start">
            <summary>
            Starts this server instance.
            </summary>
            <returns>
            return true if start successfull, else false
            </returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.OnStarted">
            <summary>
            Called when [started].
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.OnStopped">
            <summary>
            Called when [stopped].
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.Stop">
            <summary>
            Stops this server instance.
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.GetCommandByName(`2)">
            <summary>
            Gets command by command name.
            </summary>
            <param name="commandName">Name of the command.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.OnRawDataReceived(SuperSocket.SocketBase.IAppSession,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Called when [raw data received].
            </summary>
            <param name="session">The session.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.ExecuteCommand(SuperSocket.SocketBase.IRequestExecutingContext{`0,`1})">
            <summary>
            Executes the command.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.ExecuteCommand(SuperSocket.SocketBase.IAppSession,`1)">
            <summary>
            Executes the command for the session.
            </summary>
            <param name="session">The session.</param>
            <param name="requestInfo">The request info.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.SuperSocket#SocketBase#IRequestHandler{TPackageInfo}#ExecuteCommand(SuperSocket.SocketBase.IAppSession,`1)">
            <summary>
            Executes the command.
            </summary>
            <param name="session">The session.</param>
            <param name="requestInfo">The request info.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.ExecuteConnectionFilters(System.Net.IPEndPoint)">
            <summary>
            Executes the connection filters.
            </summary>
            <param name="remoteAddress">The remote address.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.SuperSocket#SocketBase#IAppServer#CreateAppSession(SuperSocket.SocketBase.ISocketSession)">
            <summary>
            Creates the app session.
            </summary>
            <param name="socketSession">The socket session.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.CreateAppSession(SuperSocket.SocketBase.ISocketSession)">
            <summary>
            create a new TAppSession instance, you can override it to create the session instance in your own way
            </summary>
            <param name="socketSession">the socket session.</param>
            <returns>the new created session instance</returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.SuperSocket#SocketBase#IAppServer#RegisterSession(SuperSocket.SocketBase.IAppSession)">
            <summary>
            Registers the new created app session into the appserver's session container.
            </summary>
            <param name="session">The session.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.OnNewSessionConnected(`0)">
            <summary>
            Called when [new session connected].
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.ResetSessionSecurity(SuperSocket.SocketBase.IAppSession,System.Security.Authentication.SslProtocols)">
            <summary>
            Resets the session's security protocol.
            </summary>
            <param name="session">The session.</param>
            <param name="security">The security protocol.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.OnSocketSessionClosed(SuperSocket.SocketBase.ISocketSession,SuperSocket.SocketBase.CloseReason)">
            <summary>
            Called when [socket session closed].
            </summary>
            <param name="session">The socket session.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.OnSessionClosed(`0,SuperSocket.SocketBase.CloseReason)">
            <summary>
            Called when [session closed].
            </summary>
            <param name="session">The appSession.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.RegisterSession(System.String,`0)">
            <summary>
            Registers the session into session container.
            </summary>
            <param name="sessionID">The session ID.</param>
            <param name="appSession">The app session.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.GetSessionByID(System.String)">
            <summary>
            Gets the app session by ID.
            </summary>
            <param name="sessionID">The session ID.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.SuperSocket#SocketBase#IAppServer#GetSessionByID(System.String)">
            <summary>
            Gets the app session by ID.
            </summary>
            <param name="sessionID"></param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.ClearIdleSession(System.Object)">
            <summary>
            Clears the idle session.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.GetSessions(System.Func{`0,System.Boolean})">
            <summary>
            Gets the matched sessions from sessions snapshot.
            </summary>
            <param name="critera">The prediction critera.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.GetAllSessions">
            <summary>
            Gets all sessions in sessions snapshot.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.GetFilePath(System.String)">
            <summary>
            Gets the physical file path by the relative file path,
            search both in the appserver's root and in the supersocket root dir if the isolation level has been set other than 'None'.
            </summary>
            <param name="relativeFilePath">The relative file path.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.SuperSocket#SocketBase#IActiveConnector#ActiveConnect(System.Net.EndPoint)">
            <summary>
            Connect the remote endpoint actively.
            </summary>
            <param name="targetEndPoint">The target end point.</param>
            <returns></returns>
            <exception cref="T:System.Exception">This server cannot support active connect.</exception>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.SuperSocket#SocketBase#ISystemEndPoint#TransferSystemMessage(System.String,System.Object)">
            <summary>
            Transfers the system message
            </summary>
            <param name="messageType">Type of the message.</param>
            <param name="messageData">The message data.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.OnSystemMessageReceived(System.String,System.Object)">
            <summary>
            Called when [system message received].
            </summary>
            <param name="messageType">Type of the message.</param>
            <param name="messageData">The message data.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.UpdateServerStatus(SuperSocket.SocketBase.StatusInfoCollection)">
            <summary>
            Updates the summary of the server.
            </summary>
            <param name="serverStatus">The server status.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.OnServerStatusCollected(SuperSocket.SocketBase.StatusInfoCollection,SuperSocket.SocketBase.StatusInfoCollection)">
            <summary>
            Called when [server status collected].
            </summary>
            <param name="bootstrapStatus">The bootstrapStatus status.</param>
            <param name="serverStatus">The server status.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>
            A service object of type <paramref name="serviceType" />.-or- null if there is no service object of type <paramref name="serviceType" />.
            </returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.GetService``1">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <typeparam name="T">the type of service object to get</typeparam>
            <returns>A service object of type T</returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.RegisterService``1(``0)">
            <summary>
            Registers the service object with the specific type.
            </summary>
            <typeparam name="T">the type of service object to get</typeparam>
            <param name="serviceInstance">The service instance.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`3.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.AppServer`3.Config">
            <summary>
            Gets the server's config.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.AppServer`3.State">
            <summary>
            Gets the current state of the work item.
            </summary>
            <value>
            The state.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.AppServer`3.Certificate">
            <summary>
            Gets the certificate of current server.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.AppServer`3.SuperSocket#SocketBase#IAppServer#BufferManager">
            <summary>
            Gets the buffer manager.
            </summary>
            <value>
            The buffer manager.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.AppServer`3.ReceiveFilterFactory">
            <summary>
            Gets or sets the receive filter factory.
            </summary>
            <value>
            The receive filter factory.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.AppServer`3.SuperSocket#SocketBase#IAppServer#ReceiveFilterFactory">
            <summary>
            Gets the Receive filter factory.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.AppServer`3.BasicSecurity">
            <summary>
            Gets the basic transfer layer security protocol.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.AppServer`3.RootConfig">
            <summary>
            Gets the root config.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.AppServer`3.Logger">
            <summary>
            Gets the logger assosiated with this object.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.AppServer`3.Bootstrap">
            <summary>
            Gets the bootstrap of this appServer instance.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.AppServer`3.TotalHandledRequests">
            <summary>
            Gets the total handled requests number.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.AppServer`3.Listeners">
            <summary>
            Gets or sets the listeners inforamtion.
            </summary>
            <value>
            The listeners.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.AppServer`3.StartedTime">
            <summary>
            Gets the started time of this server instance.
            </summary>
            <value>
            The started time.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.AppServer`3.LogFactory">
            <summary>
            Gets or sets the log factory.
            </summary>
            <value>
            The log factory.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.AppServer`3.TextEncoding">
            <summary>
            Gets the default text encoding.
            </summary>
            <value>
            The text encoding.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.AppServer`3.CompositionContainer">
            <summary>
            Gets the composition container.
            </summary>
            <value>
            The composition container.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.AppServer`3.Name">
            <summary>
            Gets the name of the server instance.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.AppServer`3.SuperSocket#SocketBase#ISocketServerAccessor#SocketServer">
            <summary>
            Gets the socket server.
            </summary>
            <value>
            The socket server.
            </value>
        </member>
        <member name="E:SuperSocket.SocketBase.AppServer`3.SuperSocket#SocketBase#IRawDataProcessor{TAppSession}#RawDataReceived">
            <summary>
            Gets or sets the raw binary data received event handler.
            TAppSession: session
            byte[]: receive buffer
            int: receive buffer offset
            int: receive lenght
            bool: whether process the received data further
            </summary>
        </member>
        <member name="E:SuperSocket.SocketBase.AppServer`3.NewRequestReceived">
            <summary>
            Occurs when a full request item received.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.AppServer`3.ConnectionFilters">
            <summary>
            Gets or sets the server's connection filter
            </summary>
            <value>
            The server's connection filters
            </value>
        </member>
        <member name="E:SuperSocket.SocketBase.AppServer`3.NewSessionConnected">
            <summary>
            The action which will be executed after a new session connect
            </summary>
        </member>
        <member name="E:SuperSocket.SocketBase.AppServer`3.SessionClosed">
            <summary>
            Gets/sets the session closed event handler.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.AppServer`3.SessionCount">
            <summary>
            Gets the total session count.
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.Async">
            <summary>
            Async extension class
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Async.AsyncRun(SuperSocket.SocketBase.ILoggerProvider,System.Action)">
            <summary>
            Runs the specified task.
            </summary>
            <param name="logProvider">The log provider.</param>
            <param name="task">The task.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.Async.AsyncRun(SuperSocket.SocketBase.ILoggerProvider,System.Action,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Runs the specified task.
            </summary>
            <param name="logProvider">The log provider.</param>
            <param name="task">The task.</param>
            <param name="taskOption">The task option.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.Async.AsyncRun(SuperSocket.SocketBase.ILoggerProvider,System.Action,System.Action{System.Exception})">
            <summary>
            Runs the specified task.
            </summary>
            <param name="logProvider">The log provider.</param>
            <param name="task">The task.</param>
            <param name="exceptionHandler">The exception handler.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.Async.AsyncRun(SuperSocket.SocketBase.ILoggerProvider,System.Action,System.Threading.Tasks.TaskCreationOptions,System.Action{System.Exception})">
            <summary>
            Runs the specified task.
            </summary>
            <param name="logProvider">The log provider.</param>
            <param name="task">The task.</param>
            <param name="taskOption">The task option.</param>
            <param name="exceptionHandler">The exception handler.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.Async.AsyncRun(SuperSocket.SocketBase.ILoggerProvider,System.Action{System.Object},System.Object)">
            <summary>
            Runs the specified task.
            </summary>
            <param name="logProvider">The log provider.</param>
            <param name="task">The task.</param>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.Async.AsyncRun(SuperSocket.SocketBase.ILoggerProvider,System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Runs the specified task.
            </summary>
            <param name="logProvider">The log provider.</param>
            <param name="task">The task.</param>
            <param name="state">The state.</param>
            <param name="taskOption">The task option.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.Async.AsyncRun(SuperSocket.SocketBase.ILoggerProvider,System.Action{System.Object},System.Object,System.Action{System.Exception})">
            <summary>
            Runs the specified task.
            </summary>
            <param name="logProvider">The log provider.</param>
            <param name="task">The task.</param>
            <param name="state">The state.</param>
            <param name="exceptionHandler">The exception handler.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.Async.AsyncRun(SuperSocket.SocketBase.ILoggerProvider,System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions,System.Action{System.Exception})">
            <summary>
            Runs the specified task.
            </summary>
            <param name="logProvider">The log provider.</param>
            <param name="task">The task.</param>
            <param name="state">The state.</param>
            <param name="taskOption">The task option.</param>
            <param name="exceptionHandler">The exception handler.</param>
            <returns></returns>
        </member>
        <member name="T:SuperSocket.SocketBase.IRequestExecutingContext`2">
            <summary>
            The interface for request executing context
            </summary>
            <typeparam name="TAppSession">The type of the application session.</typeparam>
            <typeparam name="TPackageInfo">The type of the package information.</typeparam>
        </member>
        <member name="P:SuperSocket.SocketBase.IRequestExecutingContext`2.Session">
            <summary>
            Gets the current session.
            </summary>
            <value>
            The session.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.IRequestExecutingContext`2.RequestInfo">
            <summary>
            Gets the current request.
            </summary>
            <value>
            The request information.
            </value>
        </member>
        <member name="T:SuperSocket.SocketBase.ICommandExecutingContext">
            <summary>
            The interface for command excuting context
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.ICommandExecutingContext.Session">
            <summary>
            Gets the session which is executing the command.
            </summary>
            <value>
            The session.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.ICommandExecutingContext.Request">
            <summary>
            Gets the request which is being processed.
            </summary>
            <value>
            The request.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.ICommandExecutingContext.CurrentCommand">
            <summary>
            Gets the current command which is being executed.
            </summary>
            <value>
            The current command.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.ICommandExecutingContext.Exception">
            <summary>
            Gets the exception which was thrown in the command execution.
            </summary>
            <value>
            The exception.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.ICommandExecutingContext.ExceptionHandled">
            <summary>
            Gets a value indicating whether [exception handled].
            </summary>
            <value>
              <c>true</c> if [exception handled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.ICommandExecutingContext.Cancel">
            <summary>
            Gets or sets a value indicating whether the command exeuction is cancelled.
            </summary>
            <value>
              <c>true</c> if cancel; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SuperSocket.SocketBase.IThreadExecutingContext">
            <summary>
            The interface for thread execution context
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.IThreadExecutingContext.Increment(System.Int32)">
            <summary>
            Increments the queued request count.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.IThreadExecutingContext.Decrement(System.Int32)">
            <summary>
            Decrements the queued request count.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:SuperSocket.SocketBase.IThreadExecutingContext.PreferedThreadId">
            <summary>
            Gets or sets the prefered thread identifier.
            </summary>
            <value>
            The prefered thread identifier.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.RequestExecutingContext`2.CurrentCommand">
            <summary>
            Gets the current command which is being executed.
            </summary>
            <value>
            The current command.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.RequestExecutingContext`2.Exception">
            <summary>
            Gets the exception which was thrown in the command execution.
            </summary>
            <value>
            The exception.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.RequestExecutingContext`2.ExceptionHandled">
            <summary>
            Gets a value indicating whether [exception handled].
            </summary>
            <value>
              <c>true</c> if [exception handled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.RequestExecutingContext`2.Cancel">
            <summary>
            Gets or sets a value indicating whether the command exeuction is cancelled.
            </summary>
            <value>
              <c>true</c> if cancel; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SuperSocket.SocketBase.Command.CommandLoaderBase`1">
            <summary>
            CommandLoader base class
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.Command.ICommandLoader`1">
            <summary>
            Command loader's interface
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.Command.ICommandLoader">
            <summary>
            the empty basic interface for command loader
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Command.ICommandLoader`1.Initialize(SuperSocket.SocketBase.Config.IRootConfig,SuperSocket.SocketBase.IAppServer)">
            <summary>
            Initializes the command loader by the root config and the server instance.
            </summary>
            <param name="rootConfig">The root config.</param>
            <param name="appServer">The app server.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.Command.ICommandLoader`1.TryLoadCommands(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            Tries to load commands.
            </summary>
            <param name="commands">The commands.</param>
            <returns></returns>
        </member>
        <member name="E:SuperSocket.SocketBase.Command.ICommandLoader`1.Updated">
            <summary>
            Occurs when [updated].
            </summary>
        </member>
        <member name="E:SuperSocket.SocketBase.Command.ICommandLoader`1.Error">
            <summary>
            Occurs when [error].
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Command.CommandLoaderBase`1.Initialize(SuperSocket.SocketBase.Config.IRootConfig,SuperSocket.SocketBase.IAppServer)">
            <summary>
            Initializes the command loader by the root config and appserver instance.
            </summary>
            <param name="rootConfig">The root config.</param>
            <param name="appServer">The app server.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.Command.CommandLoaderBase`1.TryLoadCommands(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            Tries to load commands.
            </summary>
            <param name="commands">The commands.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.Command.CommandLoaderBase`1.OnUpdated(System.Collections.Generic.IEnumerable{SuperSocket.SocketBase.Command.CommandUpdateInfo{`0}})">
            <summary>
            Called when [updated].
            </summary>
            <param name="commands">The commands.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.Command.CommandLoaderBase`1.OnError(System.String)">
            <summary>
            Called when [error].
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.Command.CommandLoaderBase`1.OnError(System.Exception)">
            <summary>
            Called when [error].
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="E:SuperSocket.SocketBase.Command.CommandLoaderBase`1.Updated">
            <summary>
            Occurs when [updated].
            </summary>
        </member>
        <member name="E:SuperSocket.SocketBase.Command.CommandLoaderBase`1.Error">
            <summary>
            Occurs when [error].
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.Command.CommandUpdateEventArgs`1">
            <summary>
            CommandUpdateEventArgs
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SuperSocket.SocketBase.Command.CommandUpdateEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{SuperSocket.SocketBase.Command.CommandUpdateInfo{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Command.CommandUpdateEventArgs`1"/> class.
            </summary>
            <param name="commands">The commands.</param>
        </member>
        <member name="P:SuperSocket.SocketBase.Command.CommandUpdateEventArgs`1.Commands">
            <summary>
            Gets the commands updated.
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.Command.ICommandFilterProvider">
            <summary>
            The basic interface for CommandFilter
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Command.ICommandFilterProvider.GetFilters">
            <summary>
            Gets the filters which assosiated with this command object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SuperSocket.SocketBase.ICompositeTarget">
            <summary>
            The interface for the composite target
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.ICompositeTarget.Resolve(SuperSocket.SocketBase.IAppServer,System.ComponentModel.Composition.Hosting.ExportProvider)">
            <summary>
            Resolves the specified application server.
            </summary>
            <param name="appServer">The application server.</param>
            <param name="exportProvider">The export provider.</param>
            <returns></returns>
        </member>
        <member name="T:SuperSocket.SocketBase.CompositeTargets.CompositeTargetBase`1">
            <summary>
            the basic class of composite target
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
        </member>
        <member name="M:SuperSocket.SocketBase.CompositeTargets.CompositeTargetBase`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.CompositeTargets.CompositeTargetBase`1"/> class.
            </summary>
            <param name="callback">The callback which will be invoked after the resolving is finished successfully.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.CompositeTargets.CompositeTargetBase`1.Resolve(SuperSocket.SocketBase.IAppServer,System.ComponentModel.Composition.Hosting.ExportProvider)">
            <summary>
            Resolves the specified application server.
            </summary>
            <param name="appServer">The application server.</param>
            <param name="exportProvider">The export provider.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.CompositeTargets.CompositeTargetBase`1.TryResolve(SuperSocket.SocketBase.IAppServer,System.ComponentModel.Composition.Hosting.ExportProvider,`0@)">
            <summary>
            Tries to resolve.
            </summary>
            <param name="appServer">The application server.</param>
            <param name="exportProvider">The export provider.</param>
            <param name="result">The resolving result.</param>
            <returns></returns>
        </member>
        <member name="T:SuperSocket.SocketBase.CompositeTargets.MultipleResultCompositeTarget`1">
            <summary>
            the basic class for the multiple elements result composite target
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
        </member>
        <member name="T:SuperSocket.SocketBase.CompositeTargets.MultipleResultCompositeTarget`2">
            <summary>
            the basic class for the multiple elements result composite target
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TMetadata">The type of the metadata.</typeparam>
        </member>
        <member name="T:SuperSocket.SocketBase.CompositeTargets.MultipleResultCompositeTargetCore`2">
            <summary>
            The basic class for the multiple elements result composite target
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TMetadata">The type of the metadata.</typeparam>
        </member>
        <member name="M:SuperSocket.SocketBase.CompositeTargets.MultipleResultCompositeTargetCore`2.#ctor(System.Func{SuperSocket.SocketBase.Config.IServerConfig,System.String},System.Action{System.Collections.Generic.List{`0}},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.CompositeTargets.MultipleResultCompositeTargetCore`2"/> class.
            </summary>
            <param name="configSelector">The configuration selector.</param>
            <param name="callback">The callback which will be invoked after the resolving is finished successfully.</param>
            <param name="required">if set to <c>true</c> [required], indicating whether this resolving result is required.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.CompositeTargets.MultipleResultCompositeTargetCore`2.TryResolve(SuperSocket.SocketBase.IAppServer,System.ComponentModel.Composition.Hosting.ExportProvider,System.Collections.Generic.List{`0}@)">
            <summary>
            Tries to resolve.
            </summary>
            <param name="appServer">The application server.</param>
            <param name="exportProvider">The export provider.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.CompositeTargets.MultipleResultCompositeTargetCore`2.MetadataNameEqual(`1,System.String)">
            <summary>
            Match the metadata by the name.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.CompositeTargets.MultipleResultCompositeTargetCore`2.PrepareResult(`0,SuperSocket.SocketBase.IAppServer,`1)">
            <summary>
            Prepares the result before it is returned.
            </summary>
            <param name="result">The result.</param>
            <param name="appServer">The application server.</param>
            <param name="metadata">The metadata.</param>
            <returns></returns>
        </member>
        <member name="P:SuperSocket.SocketBase.CompositeTargets.MultipleResultCompositeTargetCore`2.Required">
            <summary>
            Gets a value indicating whether this resolving result is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.CompositeTargets.MultipleResultCompositeTargetCore`2.ConfigSelector">
            <summary>
            Gets the configuration selector.
            </summary>
            <value>
            The configuration selector.
            </value>
        </member>
        <member name="M:SuperSocket.SocketBase.CompositeTargets.MultipleResultCompositeTarget`2.#ctor(System.Func{SuperSocket.SocketBase.Config.IServerConfig,System.String},System.Action{System.Collections.Generic.List{`0}},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.CompositeTargets.MultipleResultCompositeTarget`2"/> class.
            </summary>
            <param name="configSelector">The configuration selector.</param>
            <param name="callback">The callback which will be invoked after the resolving is finished successfully.</param>
            <param name="required">if set to <c>true</c> [required], indicating whether this resolving result is required.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.CompositeTargets.MultipleResultCompositeTarget`2.MetadataNameEqual(`1,System.String)">
            <summary>
            Match the metadata by the name.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.CompositeTargets.MultipleResultCompositeTarget`1.#ctor(System.Func{SuperSocket.SocketBase.Config.IServerConfig,System.String},System.Action{System.Collections.Generic.List{`0}},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.CompositeTargets.MultipleResultCompositeTarget`1"/> class.
            </summary>
            <param name="configSelector">The configuration selector.</param>
            <param name="callback">The callback which will be invoked after the resolving is finished successfully.</param>
            <param name="required">if set to <c>true</c> [required], indicating whether this resolving result is required.</param>
        </member>
        <member name="T:SuperSocket.SocketBase.CompositeTargets.SingleResultCompositeTargetCore`2">
            <summary>
            The basic class for the signle element result composite target
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TMetadata">The type of the metadata.</typeparam>
        </member>
        <member name="M:SuperSocket.SocketBase.CompositeTargets.SingleResultCompositeTargetCore`2.#ctor(System.Func{SuperSocket.SocketBase.Config.IServerConfig,System.String},System.Action{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.CompositeTargets.SingleResultCompositeTargetCore`2"/> class.
            </summary>
            <param name="configSelector">The configuration selector.</param>
            <param name="callback">The callback which will be invoked after the resolving is finished successfully.</param>
            <param name="required">if set to <c>true</c> [required], indicating whether this resolving result is required.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.CompositeTargets.SingleResultCompositeTargetCore`2.TryResolve(SuperSocket.SocketBase.IAppServer,System.ComponentModel.Composition.Hosting.ExportProvider,`0@)">
            <summary>
            Tries to resolve.
            </summary>
            <param name="appServer">The application server.</param>
            <param name="exportProvider">The export provider.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.CompositeTargets.SingleResultCompositeTargetCore`2.MetadataNameEqual(`1,System.String)">
            <summary>
            Match the metadata by the name.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.CompositeTargets.SingleResultCompositeTargetCore`2.PrepareResult(`0,SuperSocket.SocketBase.IAppServer,`1)">
            <summary>
            Prepares the result before it is returned.
            </summary>
            <param name="result">The result.</param>
            <param name="appServer">The application server.</param>
            <param name="metadata">The metadata.</param>
            <returns></returns>
        </member>
        <member name="P:SuperSocket.SocketBase.CompositeTargets.SingleResultCompositeTargetCore`2.Required">
            <summary>
            Gets a value indicating whether this resolving result is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.CompositeTargets.SingleResultCompositeTargetCore`2.ConfigSelector">
            <summary>
            Gets the configuration selector.
            </summary>
            <value>
            The configuration selector.
            </value>
        </member>
        <member name="T:SuperSocket.SocketBase.CompositeTargets.SingleResultCompositeTarget`1">
            <summary>
            The basic class for the signle element result composite target
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
        </member>
        <member name="T:SuperSocket.SocketBase.CompositeTargets.SingleResultCompositeTarget`2">
            <summary>
            The basic class for the signle element result composite target
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TMetadata">The type of the metadata.</typeparam>
        </member>
        <member name="M:SuperSocket.SocketBase.CompositeTargets.SingleResultCompositeTarget`2.#ctor(System.Func{SuperSocket.SocketBase.Config.IServerConfig,System.String},System.Action{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.CompositeTargets.SingleResultCompositeTarget`2"/> class.
            </summary>
            <param name="configSelector">The configuration selector.</param>
            <param name="callback">The callback which will be invoked after the resolving is finished successfully.</param>
            <param name="required">if set to <c>true</c> [required], indicating whether this resolving result is required.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.CompositeTargets.SingleResultCompositeTarget`2.MetadataNameEqual(`1,System.String)">
            <summary>
            Match the metadata by the name.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.CompositeTargets.SingleResultCompositeTarget`1.#ctor(System.Func{SuperSocket.SocketBase.Config.IServerConfig,System.String},System.Action{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.CompositeTargets.SingleResultCompositeTarget`1"/> class.
            </summary>
            <param name="configSelector">The configuration selector.</param>
            <param name="callback">The callback which will be invoked after the resolving is finished successfully.</param>
            <param name="required">if set to <c>true</c> [required], indicating whether this resolving result is required.</param>
        </member>
        <member name="T:SuperSocket.SocketBase.Config.BufferPoolConfig">
            <summary>
            Buffer pool configuration model class
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.Config.IBufferPoolConfig">
            <summary>
            Buffer pool configuration interface
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IBufferPoolConfig.BufferSize">
            <summary>
            Gets the size of the buffer.
            </summary>
            <value>
            The size of the buffer.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IBufferPoolConfig.InitialCount">
            <summary>
            Gets the initial count.
            </summary>
            <value>
            The initial count.
            </value>
        </member>
        <member name="M:SuperSocket.SocketBase.Config.BufferPoolConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Config.BufferPoolConfig"/> class.
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Config.BufferPoolConfig.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Config.BufferPoolConfig"/> class.
            </summary>
            <param name="bufferSize">Size of the buffer.</param>
            <param name="initialCount">The initial count.</param>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.BufferPoolConfig.BufferSize">
            <summary>
            Gets the size of the buffer.
            </summary>
            <value>
            The size of the buffer.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.BufferPoolConfig.InitialCount">
            <summary>
            Gets the initial count.
            </summary>
            <value>
            The initial count.
            </value>
        </member>
        <member name="T:SuperSocket.SocketBase.Config.CommandAssemblyConfig">
            <summary>
            Command assembly config
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.Config.ICommandAssemblyConfig">
            <summary>
            The basic interface for command assembly config
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ICommandAssemblyConfig.Assembly">
            <summary>
            Gets the assembly name.
            </summary>
            <value>
            The assembly.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.CommandAssemblyConfig.Assembly">
            <summary>
            Gets or sets the assembly name.
            </summary>
            <value>
            The assembly.
            </value>
        </member>
        <member name="T:SuperSocket.SocketBase.Config.HotUpdateAttribute">
            <summary>
            the attribute to mark which property of ServerConfig support hot update
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.Config.IConfigurationSource">
            <summary>
            Configuration source interface
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.Config.IRootConfig">
            <summary>
            IRootConfig, the part compatible with .Net 4.5 or higher
            </summary>
            <summary>
            The root configuration interface
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Config.IRootConfig.GetChildConfig``1(System.String)">
            <summary>
            Gets the child config.
            </summary>
            <typeparam name="TConfig">The type of the config.</typeparam>
            <param name="childConfigName">Name of the child config.</param>
            <returns></returns>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IRootConfig.DefaultCulture">
            <summary>
            Gets the default culture for all server instances.
            </summary>
            <value>
            The default culture.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IRootConfig.MaxWorkingThreads">
            <summary>
            Gets the max working threads.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IRootConfig.MinWorkingThreads">
            <summary>
            Gets the min working threads.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IRootConfig.MaxCompletionPortThreads">
            <summary>
            Gets the max completion port threads.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IRootConfig.MinCompletionPortThreads">
            <summary>
            Gets the min completion port threads.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IRootConfig.DisablePerformanceDataCollector">
            <summary>
            Gets a value indicating whether [disable performance data collector].
            </summary>
            <value>
            	<c>true</c> if [disable performance data collector]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IRootConfig.PerformanceDataCollectInterval">
            <summary>
            Gets the performance data collect interval, in seconds.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IRootConfig.LogFactory">
            <summary>
            Gets the log factory name.
            </summary>
            <value>
            The log factory.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IRootConfig.Isolation">
            <summary>
            Gets the isolation mode.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IRootConfig.OptionElements">
            <summary>
            Gets the option elements.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IConfigurationSource.Servers">
            <summary>
            Gets the servers definitions.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IConfigurationSource.ServerTypes">
            <summary>
            Gets the appServer types definition.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IConfigurationSource.ConnectionFilters">
            <summary>
            Gets the connection filters definition.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IConfigurationSource.LogFactories">
            <summary>
            Gets the log factories definition.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IConfigurationSource.ReceiveFilterFactories">
            <summary>
            Gets the Receive filter factories definition.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IConfigurationSource.CommandLoaders">
            <summary>
            Gets the command loaders definition.
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.Config.IServerConfig">
            <summary>
            IServerConfig, the part compatible with .Net 4.5 or higher
            </summary>
            <summary>
            Server instance configuation interface
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Config.IServerConfig.GetChildConfig``1(System.String)">
            <summary>
            Gets the child config.
            </summary>
            <typeparam name="TConfig">The type of the config.</typeparam>
            <param name="childConfigName">Name of the child config.</param>
            <returns></returns>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.DefaultCulture">
            <summary>
            Gets the default culture for this server.
            </summary>
            <value>
            The default culture.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.ServerTypeName">
            <summary>
            Gets the name of the server type this appServer want to use.
            </summary>
            <value>
            The name of the server type.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.ServerType">
            <summary>
            Gets the type definition of the appserver.
            </summary>
            <value>
            The type of the server.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.Protocol">
            <summary>
            Gets the protocol the server instance want to use.
            </summary>
            <value>
            The protocol  the server instance want to use.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.ReceiveFilterFactory">
            <summary>
            Gets the Receive filter factory.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.Ip">
            <summary>
            Gets the ip.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.Port">
            <summary>
            Gets the port.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.Options">
            <summary>
            Gets the options.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.OptionElements">
            <summary>
            Gets the option elements.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.Disabled">
            <summary>
            Gets a value indicating whether this <see cref="T:SuperSocket.SocketBase.Config.IServerConfig"/> is disabled.
            </summary>
            <value>
              <c>true</c> if disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.Mode">
            <summary>
            Gets the mode.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.SendTimeOut">
            <summary>
            Gets the send time out.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.MaxConnectionNumber">
            <summary>
            Gets the max connection number.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.ReceiveBufferSize">
            <summary>
            Gets the size of the receive buffer.
            </summary>
            <value>
            The size of the receive buffer.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.SendBufferSize">
            <summary>
            Gets the size of the send buffer.
            </summary>
            <value>
            The size of the send buffer.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.SyncSend">
            <summary>
            Gets a value indicating whether sending is in synchronous mode.
            </summary>
            <value>
              <c>true</c> if [sync send]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.LogCommand">
            <summary>
            Gets a value indicating whether log command in log file.
            </summary>
            <value><c>true</c> if log command; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.ClearIdleSession">
            <summary>
            Gets a value indicating whether clear idle session.
            </summary>
            <value><c>true</c> if clear idle session; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.ClearIdleSessionInterval">
            <summary>
            Gets the clear idle session interval, in seconds.
            </summary>
            <value>The clear idle session interval.</value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.IdleSessionTimeOut">
            <summary>
            Gets the idle session timeout time length, in seconds.
            </summary>
            <value>The idle session time out.</value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.Certificate">
            <summary>
            Gets X509Certificate configuration.
            </summary>
            <value>X509Certificate configuration.</value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.Security">
            <summary>
            Gets the security protocol, X509 certificate.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.MaxRequestLength">
            <summary>
            Gets the length of the max request.
            </summary>
            <value>
            The length of the max request.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.DisableSessionSnapshot">
            <summary>
            Gets a value indicating whether [disable session snapshot].
            </summary>
            <value>
            	<c>true</c> if [disable session snapshot]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.SessionSnapshotInterval">
            <summary>
            Gets the interval to taking snapshot for all live sessions.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.ConnectionFilter">
            <summary>
            Gets the connection filters used by this server instance.
            </summary>
            <value>
            The connection filter's name list, seperated by comma
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.CommandLoader">
            <summary>
            Gets the command loader, multiple values should be separated by comma.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.KeepAliveTime">
            <summary>
            Gets the start keep alive time, in seconds
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.KeepAliveInterval">
            <summary>
            Gets the keep alive interval, in seconds.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.ListenBacklog">
            <summary>
            Gets the backlog size of socket listening.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.StartupOrder">
            <summary>
            Gets the startup order of the server instance.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.Listeners">
            <summary>
            Gets the listeners' configuration.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.LogFactory">
            <summary>
            Gets the log factory name.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.SendingQueueSize">
            <summary>
            Gets the size of the sending queue.
            </summary>
            <value>
            The size of the sending queue.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.LogBasicSessionActivity">
            <summary>
            Gets a value indicating whether [log basic session activity like connected and disconnected].
            </summary>
            <value>
            	<c>true</c> if [log basic session activity]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.LogAllSocketException">
            <summary>
            Gets a value indicating whether [log all socket exception].
            </summary>
            <value>
            <c>true</c> if [log all socket exception]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.TextEncoding">
            <summary>
            Gets the default text encoding.
            </summary>
            <value>
            The text encoding.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.RequestHandlingMode">
            <summary>
            Gets the request handling mode.
            </summary>
            <value>
            The request handling mode.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.MinRequestHandlingThreads">
            <summary>
            Gets the minimum count of request handling threads.
            </summary>
            <value>
            Gets the minimum count of request handling threads.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.MaxRequestHandlingThreads">
            <summary>
            Gets the maximum request handling threads count.
            </summary>
            <value>
            The maximum request handling threads count.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.CommandAssemblies">
            <summary>
            Gets the command assemblies configuration.
            </summary>
            <value>
            The command assemblies.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IServerConfig.BufferPools">
            <summary>
            Gets the buffer pools configuration.
            </summary>
            <value>
            The buffer pools configuration.
            </value>
        </member>
        <member name="T:SuperSocket.SocketBase.Config.ITypeProvider">
            <summary>
            TypeProvider's interface
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ITypeProvider.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ITypeProvider.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.Config.ConfigurationSource">
            <summary>
            Poco configuration source
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.Config.RootConfig">
            <summary>
            Root configuration model
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Config.RootConfig.#ctor(SuperSocket.SocketBase.Config.IRootConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Config.RootConfig"/> class.
            </summary>
            <param name="rootConfig">The root config.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.Config.RootConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Config.RootConfig"/> class.
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Config.RootConfig.GetChildConfig``1(System.String)">
            <summary>
            Gets the child config.
            </summary>
            <typeparam name="TConfig">The type of the config.</typeparam>
            <param name="childConfigName">Name of the child config.</param>
            <returns></returns>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.RootConfig.DefaultCulture">
            <summary>
            Gets or sets the default culture.
            </summary>
            <value>
            The default culture.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.RootConfig.MaxWorkingThreads">
            <summary>
            Gets/Sets the max working threads.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.RootConfig.MinWorkingThreads">
            <summary>
            Gets/sets the min working threads.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.RootConfig.MaxCompletionPortThreads">
            <summary>
            Gets/sets the max completion port threads.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.RootConfig.MinCompletionPortThreads">
            <summary>
            Gets/sets the min completion port threads.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.RootConfig.PerformanceDataCollectInterval">
            <summary>
            Gets/sets the performance data collect interval, in seconds.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.RootConfig.DisablePerformanceDataCollector">
            <summary>
            Gets/sets a value indicating whether [disable performance data collector].
            </summary>
            <value>
            	<c>true</c> if [disable performance data collector]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.RootConfig.Isolation">
            <summary>
            Gets/sets the isolation mode.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.RootConfig.LogFactory">
            <summary>
            Gets/sets the log factory name.
            </summary>
            <value>
            The log factory.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.RootConfig.OptionElements">
            <summary>
            Gets/sets the option elements.
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Config.ConfigurationSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Config.ConfigurationSource"/> class.
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Config.ConfigurationSource.#ctor(SuperSocket.SocketBase.Config.IConfigurationSource)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Config.ConfigurationSource"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ConfigurationSource.Servers">
            <summary>
            Gets the servers definitions.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ConfigurationSource.ServerTypes">
            <summary>
            Gets/sets the server types definition.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ConfigurationSource.ConnectionFilters">
            <summary>
            Gets/sets the connection filters definition.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ConfigurationSource.LogFactories">
            <summary>
            Gets/sets the log factories definition.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ConfigurationSource.ReceiveFilterFactories">
            <summary>
            Gets/sets the Receive filter factories definition.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ConfigurationSource.CommandLoaders">
            <summary>
            Gets/sets the command loaders definition.
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.Config.ServerConfig">
            <summary>
            Server configruation model
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.Config.ServerConfig.DefaultReceiveBufferSize">
            <summary>
            Default ReceiveBufferSize
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.Config.ServerConfig.DefaultMaxConnectionNumber">
            <summary>
            Default MaxConnectionNumber
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.Config.ServerConfig.DefaultSendingQueueSize">
            <summary>
            Default sending queue size
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.Config.ServerConfig.DefaultMaxRequestLength">
            <summary>
            Default MaxRequestLength
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.Config.ServerConfig.DefaultSendTimeout">
            <summary>
            Default send timeout value, in milliseconds
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.Config.ServerConfig.DefaultClearIdleSessionInterval">
            <summary>
            Default clear idle session interval
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.Config.ServerConfig.DefaultIdleSessionTimeOut">
            <summary>
            Default idle session timeout
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.Config.ServerConfig.DefaultMinRequestHandlingThreads">
            <summary>
            The default min request handling threads
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.Config.ServerConfig.DefaultMaxRequestHandlingThreads">
            <summary>
            The default max request handling threads
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Config.ServerConfig.#ctor(SuperSocket.SocketBase.Config.IServerConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Config.ServerConfig"/> class.
            </summary>
            <param name="serverConfig">The server config.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.Config.ServerConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Config.ServerConfig"/> class.
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Config.ServerConfig.GetChildConfig``1(System.String)">
            <summary>
            Gets the child config.
            </summary>
            <typeparam name="TConfig">The type of the config.</typeparam>
            <param name="childConfigName">Name of the child config.</param>
            <returns></returns>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.DefaultCulture">
            <summary>
            Gets or sets the default culture.
            </summary>
            <value>
            The default culture.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.ServerTypeName">
            <summary>
            Gets/sets the name of the server type of this appServer want to use.
            </summary>
            <value>
            The name of the server type.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.ServerType">
            <summary>
            Gets/sets the type definition of the appserver.
            </summary>
            <value>
            The type of the server.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.Protocol">
            <summary>
            Gets/sets the protocol the server instance want to use.
            </summary>
            <value>
            The protocol  the server instance want to use.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.ReceiveFilterFactory">
            <summary>
            Gets/sets the Receive filter factory.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.Ip">
            <summary>
            Gets/sets the ip.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.Port">
            <summary>
            Gets/sets the port.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.Options">
            <summary>
            Gets/sets the options.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.OptionElements">
            <summary>
            Gets the option elements.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.Disabled">
            <summary>
            Gets/sets a value indicating whether this <see cref="T:SuperSocket.SocketBase.Config.IServerConfig"/> is disabled.
            </summary>
            <value>
              <c>true</c> if disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.Mode">
            <summary>
            Gets/sets the mode.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.SendTimeOut">
            <summary>
            Gets/sets the send time out.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.MaxConnectionNumber">
            <summary>
            Gets the max connection number.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.ReceiveBufferSize">
            <summary>
            Gets the size of the receive buffer.
            </summary>
            <value>
            The size of the receive buffer.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.SendBufferSize">
            <summary>
            Gets the size of the send buffer.
            </summary>
            <value>
            The size of the send buffer.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.SyncSend">
            <summary>
            Gets a value indicating whether sending is in synchronous mode.
            </summary>
            <value>
              <c>true</c> if [sync send]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.LogCommand">
            <summary>
            Gets/sets a value indicating whether log command in log file.
            </summary>
            <value>
              <c>true</c> if log command; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.ClearIdleSession">
            <summary>
            Gets/sets a value indicating whether clear idle session.
            </summary>
            <value>
              <c>true</c> if clear idle session; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.ClearIdleSessionInterval">
            <summary>
            Gets/sets the clear idle session interval, in seconds.
            </summary>
            <value>
            The clear idle session interval.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.IdleSessionTimeOut">
            <summary>
            Gets/sets the idle session timeout time length, in seconds.
            </summary>
            <value>
            The idle session time out.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.Certificate">
            <summary>
            Gets/sets X509Certificate configuration.
            </summary>
            <value>
            X509Certificate configuration.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.Security">
            <summary>
            Gets/sets the security protocol, X509 certificate.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.MaxRequestLength">
            <summary>
            Gets/sets the length of the max request.
            </summary>
            <value>
            The length of the max request.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.DisableSessionSnapshot">
            <summary>
            Gets/sets a value indicating whether [disable session snapshot].
            </summary>
            <value>
            	<c>true</c> if [disable session snapshot]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.SessionSnapshotInterval">
            <summary>
            Gets/sets the interval to taking snapshot for all live sessions.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.ConnectionFilter">
            <summary>
            Gets/sets the connection filters used by this server instance.
            </summary>
            <value>
            The connection filter's name list, seperated by comma
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.CommandLoader">
            <summary>
            Gets the command loader, multiple values should be separated by comma.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.KeepAliveTime">
            <summary>
            Gets/sets the start keep alive time, in seconds
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.KeepAliveInterval">
            <summary>
            Gets/sets the keep alive interval, in seconds.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.ListenBacklog">
            <summary>
            Gets the backlog size of socket listening.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.StartupOrder">
            <summary>
            Gets/sets the startup order of the server instance.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.Listeners">
            <summary>
            Gets and sets the listeners' configuration.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.LogFactory">
            <summary>
            Gets/sets the log factory name.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.SendingQueueSize">
            <summary>
            Gets/sets the size of the sending queue.
            </summary>
            <value>
            The size of the sending queue.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.LogBasicSessionActivity">
            <summary>
            Gets a value indicating whether [log basic session activity like connected and disconnected].
            </summary>
            <value>
            	<c>true</c> if [log basic session activity]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.LogAllSocketException">
            <summary>
            Gets/sets a value indicating whether [log all socket exception].
            </summary>
            <value>
            <c>true</c> if [log all socket exception]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.TextEncoding">
            <summary>
            Gets/sets the default text encoding.
            </summary>
            <value>
            The text encoding.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.RequestHandlingMode">
            <summary>
            Gets/sets the request handling mode.
            </summary>
            <value>
            The request handling mode.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.MinRequestHandlingThreads">
            <summary>
            Gets the minimum count of request handling threads.
            </summary>
            <value>
            Gets the minimum count of request handling threads.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.MaxRequestHandlingThreads">
            <summary>
            Gets the maximum request handling threads count.
            </summary>
            <value>
            The maximum request handling threads count.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.CommandAssemblies">
            <summary>
            Gets the command assemblies configuration.
            </summary>
            <value>
            The command assemblies.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ServerConfig.BufferPools">
            <summary>
            Gets/sets the buffer pools configuration.
            </summary>
            <value>
            The buffer pools configuration.
            </value>
        </member>
        <member name="T:SuperSocket.SocketBase.Config.TypeProvider">
            <summary>
            Type provider configuration
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.TypeProvider.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.TypeProvider.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.Config.TypeProviderCollection">
            <summary>
            Type provider colletion configuration
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Config.TypeProviderCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:SuperSocket.SocketBase.Config.TypeProviderCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:SuperSocket.SocketBase.Config.TypeProviderCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:SuperSocket.SocketBase.Config.TypeProviderConfig">
            <summary>
            TypeProviderConfig
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.TypeProviderConfig.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.TypeProviderConfig.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.ISessionContainer`1">
            <summary>
            The basic interface for the session container
            </summary>
            <typeparam name="TAppSession">The type of the app session.</typeparam>
        </member>
        <member name="M:SuperSocket.SocketBase.ISessionContainer`1.Initialize(SuperSocket.SocketBase.Config.IServerConfig)">
            <summary>
            Initializes the session container with the specified config.
            </summary>
            <param name="config">The config.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.ISessionContainer`1.GetSessionByID(System.String)">
            <summary>
            Gets the session by ID.
            </summary>
            <param name="sessionID">The session ID.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.ISessionContainer`1.TryRegisterSession(`0)">
            <summary>
            Tries the register session.
            </summary>
            <param name="session">The session.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.ISessionContainer`1.TryUnregisterSession(System.String)">
            <summary>
            Tries to unregisters the session.
            </summary>
            <param name="sessionID">The session ID.</param>
            <returns>true, unregister sucessfully; false, the session doesn't exist</returns>
        </member>
        <member name="P:SuperSocket.SocketBase.ISessionContainer`1.Count">
            <summary>
            Gets the total session count.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="T:SuperSocket.SocketBase.Extensions">
            <summary>
            Extensions class for SocketBase project
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Extensions.GetServerByName(SuperSocket.SocketBase.IBootstrap,System.String)">
            <summary>
            Gets the app server instance in the bootstrap by name, ignore case
            </summary>
            <param name="bootstrap">The bootstrap.</param>
            <param name="name">The name of the appserver instance.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SuperSocket.SocketBase.Extensions.CreateDefaultPoolItemCreator``1(SuperSocket.SocketBase.Pool.IPool{``0})">
            <summary>
            Creates the default pool item creator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pool">The pool.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.Extensions.GetCommandKey``1(SuperSocket.SocketBase.Command.ICommand)">
            <summary>
            Gets the command key from the command instance.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="command">The command.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Command key definition was not found.</exception>
        </member>
        <member name="M:SuperSocket.SocketBase.Extensions.GetCurrentAppDomainExportProvider(System.AppDomain)">
            <summary>
            Gets the current application domain's export provider.
            </summary>
            <param name="appDomain">The application domain.</param>
            <returns></returns>
        </member>
        <member name="T:SuperSocket.SocketBase.ActiveConnectResult">
            <summary>
            Active connect result model
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.ActiveConnectResult.Result">
            <summary>
            Gets or sets a value indicating whether the conecting is sucessfull
            </summary>
            <value>
              <c>true</c> if result; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.ActiveConnectResult.Session">
            <summary>
            Gets or sets the connected session.
            </summary>
            <value>
            The connected session.
            </value>
        </member>
        <member name="T:SuperSocket.SocketBase.StartResult">
            <summary>
            The bootstrap start result
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.StartResult.None">
            <summary>
            No appserver has been set in the bootstrap, so nothing was started
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.StartResult.Success">
            <summary>
            All appserver instances were started successfully
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.StartResult.PartialSuccess">
            <summary>
            Some appserver instances were started successfully, but some of them failed
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.StartResult.Failed">
            <summary>
            All appserver instances failed to start
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.IBootstrap">
            <summary>
            SuperSocket bootstrap
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.IBootstrap.Initialize">
            <summary>
            Initializes the bootstrap with the configuration
            </summary>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.IBootstrap.Initialize(System.Collections.Generic.IDictionary{System.String,System.Net.IPEndPoint})">
            <summary>
            Initializes the bootstrap with a listen endpoint replacement dictionary
            </summary>
            <param name="listenEndPointReplacement">The listen end point replacement.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.IBootstrap.Initialize(System.Func{SuperSocket.SocketBase.Config.IServerConfig,SuperSocket.SocketBase.Config.IServerConfig})">
            <summary>
            Initializes the bootstrap with the configuration
            </summary>
            <param name="serverConfigResolver">The server config resolver.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.IBootstrap.Initialize(AnyLog.ILogFactory)">
            <summary>
            Initializes the bootstrap with the configuration
            </summary>
            <param name="logFactory">The log factory.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.IBootstrap.Initialize(System.Func{SuperSocket.SocketBase.Config.IServerConfig,SuperSocket.SocketBase.Config.IServerConfig},AnyLog.ILogFactory)">
            <summary>
            Initializes the bootstrap with the configuration
            </summary>
            <param name="serverConfigResolver">The server config resolver.</param>
            <param name="logFactory">The log factory.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.IBootstrap.Start">
            <summary>
            Starts this bootstrap.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.IBootstrap.Stop">
            <summary>
            Stops this bootstrap.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.IBootstrap.AppServers">
            <summary>
            Gets all the app servers running in this bootstrap
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.IBootstrap.Config">
            <summary>
            Gets the config.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.IBootstrap.StartupConfigFile">
            <summary>
            Gets the startup config file.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.IBootstrap.BaseDirectory">
            <summary>
            Gets the base directory.
            </summary>
            <value>
            The base directory.
            </value>
        </member>
        <member name="T:SuperSocket.SocketBase.INewSessionHandler">
            <summary>
            The new session handler interface
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.INewSessionHandler.Initialize(SuperSocket.SocketBase.ISessionRegister)">
            <summary>
            Initializes the specified session register.
            </summary>
            <param name="sessionRegister">The session register.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.INewSessionHandler.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.INewSessionHandler.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.INewSessionHandler.AcceptNewSession(SuperSocket.SocketBase.IAppSession)">
            <summary>
            Accepts the new session.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="T:SuperSocket.SocketBase.IsolationMode">
            <summary>
            AppServer instance running isolation mode
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.IsolationMode.None">
            <summary>
            No isolation
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.IsolationMode.AppDomain">
            <summary>
            Isolation by AppDomain
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.IsolationMode.Process">
            <summary>
            Isolation by process
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.Metadata.AppServerMetadataTypeAttribute">
            <summary>
            StatusInfoMetadata type attribute
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Metadata.AppServerMetadataTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Metadata.AppServerMetadataTypeAttribute"/> class.
            </summary>
            <param name="metadataType">Type of the metadata.</param>
        </member>
        <member name="P:SuperSocket.SocketBase.Metadata.AppServerMetadataTypeAttribute.MetadataType">
            <summary>
            Gets the type of the metadata.
            </summary>
            <value>
            The type of the metadata.
            </value>
        </member>
        <member name="T:SuperSocket.SocketBase.Metadata.CommandAttribute">
            <summary>
            The command metadata attribute
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Metadata.CommandAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Metadata.CommandAttribute"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="P:SuperSocket.SocketBase.Metadata.CommandAttribute.Key">
            <summary>
            Gets the key of this command
            </summary>
            <value>
            The command key.
            </value>
        </member>
        <member name="T:SuperSocket.SocketBase.Metadata.CommandFilterAttribute">
            <summary>
            Command filter attribute
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Metadata.CommandFilterAttribute.OnCommandExecuting(SuperSocket.SocketBase.ICommandExecutingContext)">
            <summary>
            Called when [command executing].
            </summary>
            <param name="commandContext">The command context.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.Metadata.CommandFilterAttribute.OnCommandExecuted(SuperSocket.SocketBase.ICommandExecutingContext)">
            <summary>
            Called when [command executed].
            </summary>
            <param name="commandContext">The command context.</param>
        </member>
        <member name="P:SuperSocket.SocketBase.Metadata.CommandFilterAttribute.Order">
            <summary>
            Gets or sets the execution order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="T:SuperSocket.SocketBase.Metadata.AppServerMetadata">
            <summary>
            AppServer's default metadata type
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Metadata.AppServerMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Metadata.AppServerMetadata"/> class.
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Metadata.AppServerMetadata.GetAppServerMetadata(System.Type)">
            <summary>
            Gets the status info metadata from the server type.
            </summary>
            <param name="serverType">Type of the server.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:SuperSocket.SocketBase.Metadata.AppServerMetadata.StatusFields">
            <summary>
            Gets/sets the status fields.
            </summary>
            <value>
            The status fields.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Metadata.AppServerMetadata.IsServerManager">
            <summary>
            Gets a value indicating whether this instance is server manager.
            </summary>
            <value>
            <c>true</c> if this instance is server manager; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SuperSocket.SocketBase.Metadata.StatusInfoAttribute">
            <summary>
            StatusInfo Metadata
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Metadata.StatusInfoAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Metadata.StatusInfoAttribute"/> class.
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Metadata.StatusInfoAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Metadata.StatusInfoAttribute"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="P:SuperSocket.SocketBase.Metadata.StatusInfoAttribute.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Metadata.StatusInfoAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Metadata.StatusInfoAttribute.ShortName">
            <summary>
            Gets or sets the short name.
            </summary>
            <value>
            The short name.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Metadata.StatusInfoAttribute.Format">
            <summary>
            Gets or sets the format.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Metadata.StatusInfoAttribute.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Metadata.StatusInfoAttribute.OutputInPerfLog">
            <summary>
            Gets or sets a value indicating whether [output in perf log].
            </summary>
            <value>
              <c>true</c> if [output in perf log]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Metadata.StatusInfoAttribute.DataType">
            <summary>
            Gets or sets the type of the data.
            </summary>
            <value>
            The type of the data.
            </value>
        </member>
        <member name="T:SuperSocket.SocketBase.Metadata.StatusInfoKeys">
            <summary>
            Server StatusInfo Metadata
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.Metadata.StatusInfoKeys.CpuUsage">
            <summary>
            The cpu usage
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.Metadata.StatusInfoKeys.MemoryUsage">
            <summary>
            The memory usage
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.Metadata.StatusInfoKeys.TotalThreadCount">
            <summary>
            The total thread count
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.Metadata.StatusInfoKeys.AvailableWorkingThreads">
            <summary>
            The available working threads count
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.Metadata.StatusInfoKeys.AvailableCompletionPortThreads">
            <summary>
            The available completion port threads count
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.Metadata.StatusInfoKeys.MaxWorkingThreads">
            <summary>
            The max working threads count
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.Metadata.StatusInfoKeys.MaxCompletionPortThreads">
            <summary>
            The max completion port threads count
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.Metadata.StatusInfoKeys.StartedTime">
            <summary>
            The started time.
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.Metadata.StatusInfoKeys.IsRunning">
            <summary>
            	<c>true</c> if this instance is running; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.Metadata.StatusInfoKeys.TotalConnections">
            <summary>
            The total count of the connections.
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.Metadata.StatusInfoKeys.MaxConnectionNumber">
            <summary>
            The max connection number.
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.Metadata.StatusInfoKeys.TotalHandledRequests">
            <summary>
            The total handled requests count.
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.Metadata.StatusInfoKeys.RequestHandlingSpeed">
            <summary>
            Gets or sets the request handling speed, per second.
            </summary>
            <value>
            The request handling speed.
            </value>
        </member>
        <member name="F:SuperSocket.SocketBase.Metadata.StatusInfoKeys.Listeners">
            <summary>
            Gets or sets the listeners.
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.Metadata.StatusInfoKeys.AvialableSendingQueueItems">
            <summary>
            The avialable sending queue items.
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.Metadata.StatusInfoKeys.TotalSendingQueueItems">
            <summary>
            The total sending queue items.
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.NodeStatus">
            <summary>
            The status of one SuperSocket node (one installation or deployment)
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.NodeStatus.Save(System.String)">
            <summary>
            Saves the specified file path.
            </summary>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.NodeStatus.LoadFrom(System.String)">
            <summary>
            Loads a NodeStatus instance from a file.
            </summary>
            <param name="filePath">The file path.</param>
            <returns></returns>
        </member>
        <member name="P:SuperSocket.SocketBase.NodeStatus.BootstrapStatus">
            <summary>
            Gets or sets the bootstrap status.
            </summary>
            <value>
            The bootstrap status.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.NodeStatus.InstancesStatus">
            <summary>
            Gets or sets the status of all server instances running in this node.
            </summary>
            <value>
            The instances status.
            </value>
        </member>
        <member name="T:SuperSocket.SocketBase.Pool.IPoolItemCreator`1">
            <summary>
            The pool item creator interface
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SuperSocket.SocketBase.Pool.IPoolItemCreator`1.Create(System.Int32)">
            <summary>
            Creates the items of the specified count.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="T:SuperSocket.SocketBase.Pool.BufferManager">
            <summary>
            The default implemented BufferManager
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.Pool.IBufferManager">
            <summary>
            The buffer manager interface
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Pool.IBufferManager.GetBuffer(System.Int32)">
            <summary>
            Gets the buffer.
            </summary>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.Pool.IBufferManager.ReturnBuffer(System.Byte[])">
            <summary>
            Returns the buffer.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.Pool.IBufferManager.Shrink">
            <summary>
            Shrinks this instance.
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Pool.BufferManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Pool.BufferManager"/> class.
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Pool.BufferManager.#ctor(SuperSocket.SocketBase.Config.IBufferPoolConfig[])">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Pool.BufferManager"/> class.
            </summary>
            <param name="defintion">The defintion.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.Pool.BufferManager.GetBuffer(System.Int32)">
            <summary>
            Gets a buffer of the specific size.
            </summary>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.Pool.BufferManager.ReturnBuffer(System.Byte[])">
            <summary>
            Returns the buffer to pool.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.Pool.BufferManager.Shrink">
            <summary>
            Shrinks this size of pools.
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.Pool.IntelliPool`1">
            <summary>
            Intelligent object pool
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SuperSocket.SocketBase.Pool.IntelliPoolBase`1">
            <summary>
            Intelligent pool base class
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SuperSocket.SocketBase.Pool.IPool`1">
            <summary>
            The basic pool interface for the object in type of T
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SuperSocket.SocketBase.Pool.IPool">
            <summary>
            The basic pool interface
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Pool.IPool.Shrink">
            <summary>
            Shrinks this pool.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SuperSocket.SocketBase.Pool.IPool.TotalCount">
            <summary>
            Gets the total count.
            </summary>
            <value>
            The total count.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Pool.IPool.AvailableCount">
            <summary>
            Gets the available count, the items count which are available to be used.
            </summary>
            <value>
            The available count.
            </value>
        </member>
        <member name="M:SuperSocket.SocketBase.Pool.IPool`1.Get">
            <summary>
            Gets one item from the pool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.Pool.IPool`1.Return(`0)">
            <summary>
            Returns the specified item to the pool.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.Pool.IntelliPoolBase`1.#ctor(System.Int32,SuperSocket.SocketBase.Pool.IPoolItemCreator{`0},System.Action{`0},System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Pool.IntelliPoolBase`1"/> class.
            </summary>
            <param name="initialCount">The initial count.</param>
            <param name="itemCreator">The item creator.</param>
            <param name="itemCleaner">The item cleaner.</param>
            <param name="itemPreGet">The item pre get.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.Pool.IntelliPoolBase`1.RegisterNewItem(`0)">
            <summary>
            Registers the new item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.Pool.IntelliPoolBase`1.Get">
            <summary>
            Gets an item from the pool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.Pool.IntelliPoolBase`1.Shrink">
            <summary>
            Shrinks this pool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.Pool.IntelliPoolBase`1.CanReturn(`0)">
            <summary>
            Determines whether the specified item can be returned.
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if the specified item can be returned; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SuperSocket.SocketBase.Pool.IntelliPoolBase`1.TryRemove(`0)">
            <summary>
            Tries to remove the specific item
            </summary>
            <param name="item">The specific item to be removed.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.Pool.IntelliPoolBase`1.Return(`0)">
            <summary>
            Returns the specified item to the pool.
            </summary>
            <param name="item">The item to be returned.</param>
        </member>
        <member name="P:SuperSocket.SocketBase.Pool.IntelliPoolBase`1.Log">
            <summary>
            Gets the log.
            </summary>
            <value>
            The log.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Pool.IntelliPoolBase`1.CurrentGeneration">
            <summary>
            Gets the current generation.
            </summary>
            <value>
            The current generation.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Pool.IntelliPoolBase`1.TotalCount">
            <summary>
            Gets the total count.
            </summary>
            <value>
            The total count.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Pool.IntelliPoolBase`1.AvailableCount">
            <summary>
            Gets the available count, the items count which are available to be used.
            </summary>
            <value>
            The available count.
            </value>
        </member>
        <member name="M:SuperSocket.SocketBase.Pool.IntelliPool`1.#ctor(System.Int32,SuperSocket.SocketBase.Pool.IPoolItemCreator{`0},System.Action{`0},System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Pool.IntelliPool`1"/> class.
            </summary>
            <param name="initialCount">The initial count.</param>
            <param name="itemCreator">The item creator.</param>
            <param name="itemCleaner">The item cleaner.</param>
            <param name="itemPreGet">The item pre get.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.Pool.IntelliPool`1.RegisterNewItem(`0)">
            <summary>
            Registers the new item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.Pool.IntelliPool`1.Shrink">
            <summary>
            Shrinks this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.Pool.IntelliPool`1.CanReturn(`0)">
            <summary>
            Determines whether the specified item can be returned.
            </summary>
            <param name="item">The item to be returned.</param>
            <returns>
              <c>true</c> if the specified item can be returned; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SuperSocket.SocketBase.Pool.IntelliPool`1.TryRemove(`0)">
            <summary>
            Tries to remove the specific item
            </summary>
            <param name="item">The specific item to be removed.</param>
            <returns></returns>
        </member>
        <member name="T:SuperSocket.SocketBase.Pool.DefaultConstructorItemCreator`1">
            <summary>
            The item creator using type's parameter less constructor
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="M:SuperSocket.SocketBase.Pool.DefaultConstructorItemCreator`1.Create(System.Int32)">
            <summary>
            Creates items of the specified count.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="T:SuperSocket.SocketBase.ProtocolMode">
            <summary>
            Application protocol mode
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.ProtocolMode.CommandLine">
            <summary>
            The command line protocol
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.ProtocolMode.WebSocket">
            <summary>
            The web socket protocol
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.ProtocolMode.Custom">
            <summary>
            The custom protocol defined by yourself
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.Protocol.CommandLineReceiveFilterFactory">
            <summary>
            CommandLine RequestFilter Factory
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.Protocol.TerminatorReceiveFilterFactory">
            <summary>
            Terminator ReceiveFilter Factory
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.Protocol.IReceiveFilterFactory`1">
            <summary>
            Receive filter factory interface
            </summary>
            <typeparam name="TPackageInfo">The type of the request info.</typeparam>
        </member>
        <member name="T:SuperSocket.SocketBase.Protocol.IReceiveFilterFactory">
            <summary>
            Receive filter factory interface
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Protocol.IReceiveFilterFactory`1.CreateFilter(SuperSocket.SocketBase.IAppServer,SuperSocket.SocketBase.IAppSession,System.Net.IPEndPoint)">
            <summary>
            Creates the Receive filter.
            </summary>
            <param name="appServer">The app server.</param>
            <param name="appSession">The app session.</param>
            <param name="remoteEndPoint">The remote end point.</param>
            <returns>
            the new created request filer assosiated with this socketSession
            </returns>
        </member>
        <member name="M:SuperSocket.SocketBase.Protocol.TerminatorReceiveFilterFactory.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Protocol.TerminatorReceiveFilterFactory"/> class.
            </summary>
            <param name="terminator">The terminator.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.Protocol.TerminatorReceiveFilterFactory.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Protocol.TerminatorReceiveFilterFactory"/> class.
            </summary>
            <param name="terminator">The terminator.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.Protocol.TerminatorReceiveFilterFactory.#ctor(System.String,System.Text.Encoding,SuperSocket.ProtoBase.IStringParser)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Protocol.TerminatorReceiveFilterFactory"/> class.
            </summary>
            <param name="terminator">The terminator.</param>
            <param name="encoding">The encoding.</param>
            <param name="stringParser">The line parser.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.Protocol.TerminatorReceiveFilterFactory.CreateFilter(SuperSocket.SocketBase.IAppServer,SuperSocket.SocketBase.IAppSession,System.Net.IPEndPoint)">
            <summary>
            Creates the Receive filter.
            </summary>
            <param name="appServer">The app server.</param>
            <param name="appSession">The app session.</param>
            <param name="remoteEndPoint">The remote end point.</param>
            <returns>
            the new created request filer assosiated with this socketSession
            </returns>
        </member>
        <member name="M:SuperSocket.SocketBase.Protocol.CommandLineReceiveFilterFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Protocol.CommandLineReceiveFilterFactory"/> class.
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Protocol.CommandLineReceiveFilterFactory.#ctor(System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Protocol.CommandLineReceiveFilterFactory"/> class.
            </summary>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.Protocol.CommandLineReceiveFilterFactory.#ctor(System.Text.Encoding,SuperSocket.ProtoBase.IStringParser)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Protocol.CommandLineReceiveFilterFactory"/> class.
            </summary>
            <param name="encoding">The encoding.</param>
            <param name="stringParser">The request info parser.</param>
        </member>
        <member name="T:SuperSocket.SocketBase.Protocol.CountSpliterReceiveFilter">
            <summary>
            This Receive filter is designed for this kind protocol:
            each request has fixed count part which splited by a char(byte)
            for instance, request is defined like this "#12122#23343#4545456565#343435446#",
            because this request is splited into many parts by 5 '#', we can create a Receive filter by CountSpliterRequestFilter((byte)'#', 5)
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Protocol.CountSpliterReceiveFilter.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Protocol.CountSpliterReceiveFilter"/> class.
            </summary>
            <param name="spliter">The spliter.</param>
            <param name="spliterCount">The spliter count.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.Protocol.CountSpliterReceiveFilter.#ctor(System.Byte[],System.Int32,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Protocol.CountSpliterReceiveFilter"/> class.
            </summary>
            <param name="spliter">The spliter.</param>
            <param name="spliterCount">The spliter count.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.Protocol.CountSpliterReceiveFilter.#ctor(System.Byte[],System.Int32,System.Text.Encoding,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Protocol.CountSpliterReceiveFilter"/> class.
            </summary>
            <param name="spliter">The spliter.</param>
            <param name="spliterCount">The spliter count.</param>
            <param name="encoding">The encoding.</param>
            <param name="keyIndex">Index of the key.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.Protocol.CountSpliterReceiveFilter.ResolvePackage(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>
            Resolves the package.
            </summary>
            <param name="packageData">The package data.</param>
            <returns></returns>
        </member>
        <member name="T:SuperSocket.SocketBase.Protocol.CountSpliterReceiveFilterFactory`2">
            <summary>
            ReceiveFilterFactory for CountSpliterReceiveFilter
            </summary>
            <typeparam name="TReceiveFilter">The type of the Receive filter.</typeparam>
            <typeparam name="TPackageInfo">The type of the request info.</typeparam>
        </member>
        <member name="M:SuperSocket.SocketBase.Protocol.CountSpliterReceiveFilterFactory`2.CreateFilter(SuperSocket.SocketBase.IAppServer,SuperSocket.SocketBase.IAppSession,System.Net.IPEndPoint)">
            <summary>
            Creates the filter.
            </summary>
            <param name="appServer">The app server.</param>
            <param name="appSession">The app session.</param>
            <param name="remoteEndPoint">The remote end point.</param>
            <returns></returns>
        </member>
        <member name="T:SuperSocket.SocketBase.Protocol.CountSpliterReceiveFilterFactory`1">
            <summary>
            ReceiveFilterFactory for CountSpliterReceiveFilter
            </summary>
            <typeparam name="TReceiveFilter">The type of the Receive filter.</typeparam>
        </member>
        <member name="T:SuperSocket.SocketBase.Protocol.CountSpliterReceiveFilterFactory">
            <summary>
            receiveFilterFactory for CountSpliterRequestFilter
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Protocol.CountSpliterReceiveFilterFactory.#ctor(System.Byte,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Protocol.CountSpliterReceiveFilterFactory"/> class.
            </summary>
            <param name="spliter">The spliter.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.Protocol.CountSpliterReceiveFilterFactory.CreateFilter(SuperSocket.SocketBase.IAppServer,SuperSocket.SocketBase.IAppSession,System.Net.IPEndPoint)">
            <summary>
            Creates the filter.
            </summary>
            <param name="appServer">The app server.</param>
            <param name="appSession">The app session.</param>
            <param name="remoteEndPoint">The remote end point.</param>
            <returns></returns>
        </member>
        <member name="T:SuperSocket.SocketBase.Protocol.DefaultReceiveFilterFactory`2">
            <summary>
            DefaultreceiveFilterFactory
            </summary>
            <typeparam name="TReceiveFilter">The type of the Receive filter.</typeparam>
            <typeparam name="TPackageInfo">The type of the request info.</typeparam>
        </member>
        <member name="M:SuperSocket.SocketBase.Protocol.DefaultReceiveFilterFactory`2.CreateFilter(SuperSocket.SocketBase.IAppServer,SuperSocket.SocketBase.IAppSession,System.Net.IPEndPoint)">
            <summary>
            Creates the Receive filter.
            </summary>
            <param name="appServer">The app server.</param>
            <param name="appSession">The app session.</param>
            <param name="remoteEndPoint">The remote end point.</param>
            <returns>
            the new created request filer assosiated with this socketSession
            </returns>
        </member>
        <member name="T:SuperSocket.SocketBase.Protocol.TerminatorReceiveFilter">
            <summary>
            TerminatorReceiveFilter with StringPackageInfo as package info
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Protocol.TerminatorReceiveFilter.#ctor(System.Byte[],System.Text.Encoding,SuperSocket.ProtoBase.IStringParser)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Protocol.TerminatorReceiveFilter"/> class.
            </summary>
            <param name="terminator">The terminator.</param>
            <param name="encoding">The encoding.</param>
            <param name="stringParser">The string parser.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.Protocol.TerminatorReceiveFilter.ResolvePackage(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>
            Resolves the package binary data to package instance
            </summary>
            <param name="packageData">The package binary data.</param>
            <returns>the resolved package instance</returns>
        </member>
        <member name="T:SuperSocket.SocketBase.Protocol.IUdpPackageInfo">
            <summary>
            The udp package interface
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Protocol.IUdpPackageInfo.SessionID">
            <summary>
            Gets the session ID.
            </summary>
            <value>
            The session ID.
            </value>
        </member>
        <member name="T:SuperSocket.SocketBase.Protocol.UdpPackageInfo`1">
            <summary>
            UdpPackageInfo, it is designed for passing in business session ID to udp package info
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Protocol.UdpPackageInfo`1.#ctor(`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Protocol.UdpPackageInfo`1"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="sessionID">The session ID.</param>
        </member>
        <member name="P:SuperSocket.SocketBase.Protocol.UdpPackageInfo`1.Key">
            <summary>
            Gets the key of this request.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Protocol.UdpPackageInfo`1.SessionID">
            <summary>
            Gets the session ID.
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.Provider.IProviderMetadata">
            <summary>
            The provider metadata interface
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Provider.IProviderMetadata.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:SuperSocket.SocketBase.Provider.ProviderMetadataAttribute">
            <summary>
            Provider metadata attribute
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Provider.ProviderMetadataAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Provider.ProviderMetadataAttribute"/> class.
            </summary>
            <param name="name">The name of the provider.</param>
        </member>
        <member name="P:SuperSocket.SocketBase.Provider.ProviderMetadataAttribute.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:SuperSocket.SocketBase.RequestHandler`2">
            <summary>
            Request handler
            </summary>
            <typeparam name="TAppSession">The type of the app session.</typeparam>
            <typeparam name="TPackageInfo">The type of the request info.</typeparam>
            <param name="session">The session.</param>
            <param name="requestInfo">The request info.</param>
        </member>
        <member name="T:SuperSocket.SocketBase.Config.IListenerConfig">
            <summary>
            The listener configuration interface
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IListenerConfig.Ip">
            <summary>
            Gets the ip of listener
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IListenerConfig.Port">
            <summary>
            Gets the port of listener
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IListenerConfig.Backlog">
            <summary>
            Gets the backlog.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.IListenerConfig.Security">
            <summary>
            Gets the security option, None/Default/Tls/Ssl/...
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.Config.ListenerConfig">
            <summary>
            Listener configuration model
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Config.ListenerConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Config.ListenerConfig"/> class.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ListenerConfig.Ip">
            <summary>
            Gets the ip of listener
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ListenerConfig.Port">
            <summary>
            Gets the port of listener
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ListenerConfig.Backlog">
            <summary>
            Gets the backlog.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ListenerConfig.Security">
            <summary>
            Gets/sets the security option, None/Default/Tls/Ssl/...
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.ListenerInfo">
            <summary>
            Listener inforamtion
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.ListenerInfo.EndPoint">
            <summary>
            Gets or sets the listen endpoint.
            </summary>
            <value>
            The end point.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.ListenerInfo.BackLog">
            <summary>
            Gets or sets the listen backlog.
            </summary>
            <value>
            The back log.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.ListenerInfo.Security">
            <summary>
            Gets or sets the security protocol.
            </summary>
            <value>
            The security.
            </value>
        </member>
        <member name="T:SuperSocket.SocketBase.Command.CommandBase`2">
            <summary>
            Command base class
            </summary>
            <typeparam name="TAppSession">The type of the app session.</typeparam>
            <typeparam name="TPackageInfo">The type of the request info.</typeparam>
        </member>
        <member name="T:SuperSocket.SocketBase.Command.ICommand`2">
            <summary>
            Command basic interface
            </summary>
            <typeparam name="TAppSession">The type of the app session.</typeparam>
            <typeparam name="TPackageInfo">The type of the request info.</typeparam>
        </member>
        <member name="T:SuperSocket.SocketBase.Command.ICommand">
            <summary>
            Command basic interface
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Command.ICommand.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Command.ICommand`2.ExecuteCommand(`0,`1)">
            <summary>
            Executes the command.
            </summary>
            <param name="session">The session.</param>
            <param name="requestInfo">The request info.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.Command.CommandBase`2.ExecuteCommand(`0,`1)">
            <summary>
            Executes the command.
            </summary>
            <param name="session">The session.</param>
            <param name="packageInfo">The package info.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.Command.CommandBase`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:SuperSocket.SocketBase.Command.CommandBase`2.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.Command.CommandUpdateAction">
            <summary>
            Command update action enum
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.Command.CommandUpdateAction.Add">
            <summary>
            Add command
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.Command.CommandUpdateAction.Remove">
            <summary>
            Remove command
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.Command.CommandUpdateAction.Update">
            <summary>
            Update command
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.Command.CommandUpdateInfo`1">
            <summary>
            Command update information
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:SuperSocket.SocketBase.Command.CommandUpdateInfo`1.UpdateAction">
            <summary>
            Gets or sets the update action.
            </summary>
            <value>
            The update action.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Command.CommandUpdateInfo`1.Command">
            <summary>
            Gets or sets the target command.
            </summary>
            <value>
            The command.
            </value>
        </member>
        <member name="T:SuperSocket.SocketBase.Command.MockupCommand`2">
            <summary>
            Mockup command
            </summary>
            <typeparam name="TAppSession">The type of the app session.</typeparam>
            <typeparam name="TPackageInfo">The type of the request info.</typeparam>
        </member>
        <member name="M:SuperSocket.SocketBase.Command.MockupCommand`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Command.MockupCommand`2"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.Command.MockupCommand`2.ExecuteCommand(`0,`1)">
            <summary>
            Executes the command.
            </summary>
            <param name="session">The session.</param>
            <param name="requestInfo">The request info.</param>
        </member>
        <member name="P:SuperSocket.SocketBase.Command.MockupCommand`2.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.Command.ReflectCommandLoader`1">
            <summary>
            A command loader which loads commands from assembly by reflection
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Command.ReflectCommandLoader`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Command.ReflectCommandLoader`1"/> class.
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Command.ReflectCommandLoader`1.Initialize(SuperSocket.SocketBase.Config.IRootConfig,SuperSocket.SocketBase.IAppServer)">
            <summary>
            Initializes the command loader by the root config and the server instance.
            </summary>
            <param name="rootConfig">The root config.</param>
            <param name="appServer">The app server.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.Command.ReflectCommandLoader`1.TryLoadCommands(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            Tries to load commands.
            </summary>
            <param name="commands">The commands.</param>
            <returns></returns>
        </member>
        <member name="T:SuperSocket.SocketBase.Config.CertificateConfig">
            <summary>
            Certificate config model class
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.Config.ICertificateConfig">
            <summary>
            Certificate configuration interface
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ICertificateConfig.FilePath">
            <summary>
            Gets the file path.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ICertificateConfig.Password">
            <summary>
            Gets the password.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ICertificateConfig.StoreName">
            <summary>
            Gets the the store where certificate locates.
            </summary>
            <value>
            The name of the store.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ICertificateConfig.Thumbprint">
            <summary>
            Gets the thumbprint.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ICertificateConfig.StoreLocation">
            <summary>
            Gets the store location of the certificate.
            </summary>
            <value>
            The store location.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ICertificateConfig.ClientCertificateRequired">
            <summary>
            Gets a value indicating whether [client certificate required].
            </summary>
            <value>
            <c>true</c> if [client certificate required]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.ICertificateConfig.KeyStorageFlags">
            <summary>
            Gets a value that will be used to instantiate the X509Certificate2 object in the CertificateManager
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.CertificateConfig.FilePath">
            <summary>
            Gets/sets the file path.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.CertificateConfig.Password">
            <summary>
            Gets/sets the password.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.CertificateConfig.StoreName">
            <summary>
            Gets/sets the the store where certificate locates.
            </summary>
            <value>
            The name of the store.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.CertificateConfig.StoreLocation">
            <summary>
            Gets/sets the store location of the certificate.
            </summary>
            <value>
            The store location.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.CertificateConfig.Thumbprint">
            <summary>
            Gets/sets the thumbprint.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.CertificateConfig.ClientCertificateRequired">
            <summary>
            Gets/sets a value indicating whether [client certificate required].
            </summary>
            <value>
            <c>true</c> if [client certificate required]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Config.CertificateConfig.KeyStorageFlags">
            <summary>
            Gets/sets a value that will be used to instantiate the X509Certificate2 object in the CertificateManager
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.IAppSession">
            <summary>
            The basic interface for appSession
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.ISessionBase">
            <summary>
            The basic session interface
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.ISessionBase.SessionID">
            <summary>
            Gets the session ID.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.ISessionBase.RemoteEndPoint">
            <summary>
            Gets the remote endpoint.
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.IAppSession.CreatePipelineProcessor">
            <summary>
            Creates the pipeline processor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.IAppSession.Close">
            <summary>
            Closes this session.
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.IAppSession.Close(SuperSocket.SocketBase.CloseReason)">
            <summary>
            Closes the session by the specified reason.
            </summary>
            <param name="reason">The close reason.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.IAppSession.StartSession">
            <summary>
            Starts the session.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.IAppSession.AppServer">
            <summary>
            Gets the app server.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.IAppSession.SocketSession">
            <summary>
            Gets the socket session of the AppSession.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.IAppSession.Items">
            <summary>
            Gets the items.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.IAppSession.Config">
            <summary>
            Gets the config of the server.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.IAppSession.LocalEndPoint">
            <summary>
            Gets the local listening endpoint.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.IAppSession.LastActiveTime">
            <summary>
            Gets or sets the last active time of the session.
            </summary>
            <value>
            The last active time.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.IAppSession.StartTime">
            <summary>
            Gets the start time of the session.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.IAppSession.Connected">
            <summary>
            Gets a value indicating whether this <see cref="T:SuperSocket.SocketBase.IAppSession"/> is connected.
            </summary>
            <value>
              <c>true</c> if connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.IAppSession.Charset">
            <summary>
            Gets or sets the charset which is used for transfering text message.
            </summary>
            <value>The charset.</value>
        </member>
        <member name="P:SuperSocket.SocketBase.IAppSession.Logger">
            <summary>
            Gets the logger assosiated with this session.
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.IAppSession`2">
            <summary>
            The interface for appSession
            </summary>
            <typeparam name="TAppSession">The type of the app session.</typeparam>
            <typeparam name="TPackageInfo">The type of the request info.</typeparam>
        </member>
        <member name="M:SuperSocket.SocketBase.IAppSession`2.Initialize(SuperSocket.SocketBase.IAppServer{`0,`1},SuperSocket.SocketBase.ISocketSession)">
            <summary>
            Initializes the specified session.
            </summary>
            <param name="server">The server.</param>
            <param name="socketSession">The socket session.</param>
        </member>
        <member name="T:SuperSocket.SocketBase.IConnectionFilter">
            <summary>
            The basic interface of connection filter
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.IConnectionFilter.Initialize(System.String,SuperSocket.SocketBase.IAppServer)">
            <summary>
            Initializes the connection filter
            </summary>
            <param name="name">The name.</param>
            <param name="appServer">The app server.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.IConnectionFilter.AllowConnect(System.Net.IPEndPoint)">
            <summary>
            Whether allows the connect according the remote endpoint
            </summary>
            <param name="remoteAddress">The remote address.</param>
            <returns></returns>
        </member>
        <member name="P:SuperSocket.SocketBase.IConnectionFilter.Name">
            <summary>
            Gets the name of the filter.
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.ISocketServer">
            <summary>
            It is the basic interface of SocketServer,
            SocketServer is the abstract server who really listen the comming sockets directly.
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.ISocketServer.Start">
            <summary>
            Starts this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.ISocketServer.ResetSessionSecurity(SuperSocket.SocketBase.IAppSession,System.Security.Authentication.SslProtocols)">
            <summary>
            Resets the session's security protocol.
            </summary>
            <param name="session">The session.</param>
            <param name="security">The security protocol.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.ISocketServer.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.ISocketServer.IsRunning">
            <summary>
            Gets a value indicating whether this instance is running.
            </summary>
            <value>
            	<c>true</c> if this instance is running; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.ISocketServer.SendingQueuePool">
            <summary>
            Gets the information of the sending queue pool.
            </summary>
            <value>
            The sending queue pool.
            </value>
        </member>
        <member name="T:SuperSocket.SocketBase.ISocketServerFactory">
            <summary>
            The interface for socket server factory
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.ISocketServerFactory.CreateSocketServer``1(SuperSocket.SocketBase.IAppServer,SuperSocket.SocketBase.ListenerInfo[],SuperSocket.SocketBase.Config.IServerConfig)">
            <summary>
            Creates the socket server instance.
            </summary>
            <typeparam name="TPackageInfo">The type of the request info.</typeparam>
            <param name="appServer">The app server.</param>
            <param name="listeners">The listeners.</param>
            <param name="config">The config.</param>
            <returns></returns>
        </member>
        <member name="T:SuperSocket.SocketBase.CloseReason">
            <summary>
            CloseReason enum
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.CloseReason.Unknown">
            <summary>
            The socket is closed for unknown reason
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.CloseReason.ServerShutdown">
            <summary>
            Close for server shutdown
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.CloseReason.ClientClosing">
            <summary>
            The client close the socket
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.CloseReason.ServerClosing">
            <summary>
            The server side close the socket
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.CloseReason.ApplicationError">
            <summary>
            Application error
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.CloseReason.SocketError">
            <summary>
            The socket is closed for a socket error
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.CloseReason.TimeOut">
            <summary>
            The socket is closed by server for timeout
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.CloseReason.ProtocolError">
            <summary>
            Protocol error 
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.CloseReason.InternalError">
            <summary>
            SuperSocket internal error
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.ISocketSession">
            <summary>
            The interface for socket session
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.ISocketSession.Initialize(SuperSocket.SocketBase.IAppSession)">
            <summary>
            Initializes the socket session with the specified app session.
            </summary>
            <param name="appSession">The app session.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.ISocketSession.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.ISocketSession.Close(SuperSocket.SocketBase.CloseReason)">
            <summary>
            Closes the socket session for the specified reason.
            </summary>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.ISocketSession.TrySend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>
            Tries to send array segment.
            </summary>
            <param name="segments">The segments.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.ISocketSession.TrySend(System.ArraySegment{System.Byte})">
            <summary>
            Tries to send array segment.
            </summary>
            <param name="segment">The segment.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.ISocketSession.ApplySecureProtocol">
            <summary>
            Applies the secure protocol.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.ISocketSession.Client">
            <summary>
            Gets the client socket.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.ISocketSession.LocalEndPoint">
            <summary>
            Gets the local listening endpoint.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.ISocketSession.SecureProtocol">
            <summary>
            Gets or sets the secure protocol.
            </summary>
            <value>
            The secure protocol.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.ISocketSession.Closed">
            <summary>
            Occurs when [closed].
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.ISocketSession.AppSession">
            <summary>
            Gets the app session assosiated with this socket session.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.ISocketSession.PipelineProcessor">
            <summary>
            Gets the pipeline processor.
            </summary>
            <value>
            The pipeline processor.
            </value>
        </member>
        <member name="T:SuperSocket.SocketBase.LoggerExtension">
            <summary>
            Logger extension class
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.LoggerExtension.Error(AnyLog.ILog,System.String,System.Exception,SuperSocket.SocketBase.ISessionBase)">
            <summary>
            Logs the error with the session's information
            </summary>
            <param name="logger">The logger.</param>
            <param name="title">The title.</param>
            <param name="e">The e.</param>
            <param name="session">The session.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.LoggerExtension.Error(AnyLog.ILog,System.String,SuperSocket.SocketBase.ISessionBase)">
            <summary>
            Logs the error with the session's information
            </summary>
            <param name="logger">The logger.</param>
            <param name="message">The message.</param>
            <param name="session">The session.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.LoggerExtension.Info(AnyLog.ILog,System.String,SuperSocket.SocketBase.ISessionBase)">
            <summary>
            Logs the information with the session's information
            </summary>
            <param name="logger">The logger.</param>
            <param name="message">The message.</param>
            <param name="session">The session.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.LoggerExtension.Debug(AnyLog.ILog,System.String,SuperSocket.SocketBase.ISessionBase)">
            <summary>
            Logs the debug message with the session's information
            </summary>
            <param name="logger">The logger.</param>
            <param name="message">The message.</param>
            <param name="session">The session.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.LoggerExtension.LogPerf(SuperSocket.SocketBase.IAppServer,System.String)">
            <summary>
            Logs the performance message
            </summary>
            <param name="appServer">The app server.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:SuperSocket.SocketBase.RequestHandlingMode">
            <summary>
            Request handling mode
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.RequestHandlingMode.Default">
            <summary>
            The system IOCP thread pool, the request will be handled by the same IO thread which received the data, default option
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.RequestHandlingMode.SingleThread">
            <summary>
            Single thread
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.RequestHandlingMode.CustomThreadPool">
            <summary>
            The SuperSocket customized thread pool to ensure first received requests must be handled first
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Scheduler.CustomThreadPoolTaskScheduler.FindFreeItem">
            <summary>
            Finds the free queue, the method can be improved by better load balance algorithm
            </summary>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.Scheduler.CustomThreadPoolTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>
            Queues a <see cref="T:System.Threading.Tasks.Task" /> to the scheduler.
            </summary>
            <param name="task">The <see cref="T:System.Threading.Tasks.Task" /> to be queued.</param>
        </member>
        <member name="T:SuperSocket.SocketBase.ServerResource.ServerResourceItem`1">
            <summary>
            Server resource item
            </summary>
            <typeparam name="TDataType">The type of the data type.</typeparam>
        </member>
        <member name="T:SuperSocket.SocketBase.ServerResource.ServerResourceItem">
            <summary>
            Server resource item
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.Utils.ITransactionItem">
            <summary>
            The interface for transaction item
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Utils.ITransactionItem.Rollback">
            <summary>
            Rollbacks the transaction item.
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.ServerResource.ServerResourceItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.ServerResource.ServerResourceItem"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.ServerResource.ServerResourceItem.Rollback">
            <summary>
            Rollbacks/cleans this resource.
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.ServerResource.ServerResourceItem.Create``2(System.Action{``1},SuperSocket.SocketBase.Config.IServerConfig,System.Func{``1})">
            <summary>
            Creates the server resource item.
            </summary>
            <typeparam name="TResourceItemType">The type of the resource item type.</typeparam>
            <typeparam name="TDataType">The type of the data type.</typeparam>
            <param name="assignAction">The assign action.</param>
            <param name="config">The config.</param>
            <param name="accessFunc">The access func.</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="P:SuperSocket.SocketBase.ServerResource.ServerResourceItem.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:SuperSocket.SocketBase.ServerResource.IResourceCreator`1">
            <summary>
            The resource creator interface
            </summary>
            <typeparam name="TDataType">The type of the data type.</typeparam>
        </member>
        <member name="M:SuperSocket.SocketBase.ServerResource.IResourceCreator`1.CreateResource(SuperSocket.SocketBase.Config.IServerConfig)">
            <summary>
            Creates the resource.
            </summary>
            <param name="config">The config.</param>
            <returns></returns>
        </member>
        <member name="P:SuperSocket.SocketBase.ServerResource.IResourceCreator`1.Assigner">
            <summary>
            Gets or sets the assigner of the resource.
            </summary>
            <value>
            The assigner.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.ServerResource.IResourceCreator`1.Accessor">
            <summary>
            Gets or sets the accessor of the resource.
            </summary>
            <value>
            The accessor.
            </value>
        </member>
        <member name="M:SuperSocket.SocketBase.ServerResource.ServerResourceItem`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.ServerResource.ServerResourceItem`1"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.ServerResource.ServerResourceItem`1.CreateResource(SuperSocket.SocketBase.Config.IServerConfig)">
            <summary>
            Creates the resource.
            </summary>
            <param name="config">The config.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.ServerResource.ServerResourceItem`1.Rollback">
            <summary>
            Rollbacks this resource.
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.ServerState">
            <summary>
            Server's state enum class
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.ServerState.NotInitialized">
            <summary>
            Not initialized
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.ServerState.Initializing">
            <summary>
            In initializing
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.ServerState.NotStarted">
            <summary>
            Has been initialized, but not started
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.ServerState.Starting">
            <summary>
            In starting
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.ServerState.Running">
            <summary>
            In running
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.ServerState.Stopping">
            <summary>
            In stopping
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.SessionHandler`1">
            <summary>
            Used for session level event handler
            </summary>
            <typeparam name="TAppSession">the type of the target session</typeparam>
            <param name="session">the target session</param>
        </member>
        <member name="T:SuperSocket.SocketBase.SessionHandler`2">
            <summary>
            Used for session level event handler
            </summary>
            <typeparam name="TAppSession">the type of the target session</typeparam>
            <typeparam name="TParam">the target session</typeparam>
            <param name="session">the target session</param>
            <param name="value">the event parameter</param>
        </member>
        <member name="T:SuperSocket.SocketBase.SocketMode">
            <summary>
            Socket server running mode
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.SocketMode.Tcp">
            <summary>
            Tcp mode
            </summary>
        </member>
        <member name="F:SuperSocket.SocketBase.SocketMode.Udp">
            <summary>
            Udp mode
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.AppServer">
            <summary>
            AppServer class
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.AppServer`1">
            <summary>
            AppServer class
            </summary>
            <typeparam name="TAppSession">The type of the app session.</typeparam>
        </member>
        <member name="T:SuperSocket.SocketBase.AppServer`2">
            <summary>
            AppServer base class
            </summary>
            <typeparam name="TAppSession">The type of the app session.</typeparam>
            <typeparam name="TPackageInfo">The type of the package info.</typeparam>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.AppServer`2"/> class.
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`2.#ctor(SuperSocket.SocketBase.Protocol.IReceiveFilterFactory{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.AppServer`2"/> class.
            </summary>
            <param name="receiveFilterFactory">The Receive filter factory.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.AppServer`1"/> class.
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer`1.#ctor(SuperSocket.SocketBase.Protocol.IReceiveFilterFactory{SuperSocket.ProtoBase.StringPackageInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.AppServer`1"/> class.
            </summary>
            <param name="receiveFilterFactory">The Receive filter factory.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.AppServer"/> class.
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.AppServer.#ctor(SuperSocket.SocketBase.Protocol.IReceiveFilterFactory{SuperSocket.ProtoBase.StringPackageInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.AppServer"/> class.
            </summary>
            <param name="receiveFilterFactory">The Receive filter factory.</param>
        </member>
        <member name="T:SuperSocket.SocketBase.AppSession`2">
            <summary>
            AppSession base class
            </summary>
            <typeparam name="TAppSession">The type of the app session.</typeparam>
            <typeparam name="TPackageInfo">The type of the request info.</typeparam>
        </member>
        <member name="T:SuperSocket.SocketBase.AppSession`3">
            <summary>
            AppSession base class
            </summary>
            <typeparam name="TAppSession">The type of the app session.</typeparam>
            <typeparam name="TPackageInfo">The type of the request info.</typeparam>
            <typeparam name="TKey">The type of the package key.</typeparam>
        </member>
        <member name="M:SuperSocket.SocketBase.AppSession`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.AppSession`2"/> class.
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.AppSession`3.Initialize(SuperSocket.SocketBase.IAppServer{`0,`1},SuperSocket.SocketBase.ISocketSession)">
            <summary>
            Initializes the specified app session by AppServer and SocketSession.
            </summary>
            <param name="appServer">The app server.</param>
            <param name="socketSession">The socket session.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.AppSession`3.SuperSocket#SocketBase#IAppSession#StartSession">
            <summary>
            Starts the session.
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.AppSession`3.OnInit">
            <summary>
            Called when [init].
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.AppSession`3.OnSessionStarted">
            <summary>
            Called when [session started].
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.AppSession`3.OnSessionClosed(SuperSocket.SocketBase.CloseReason)">
            <summary>
            Called when [session closed].
            </summary>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.AppSession`3.HandleException(System.Exception)">
            <summary>
            Handles the exceptional error, it only handles application error.
            </summary>
            <param name="e">The exception.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.AppSession`3.HandleUnknownRequest(`1)">
            <summary>
            Handles the unknown request.
            </summary>
            <param name="requestInfo">The request info.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.AppSession`3.Close(SuperSocket.SocketBase.CloseReason)">
            <summary>
            Closes the session by the specified reason.
            </summary>
            <param name="reason">The close reason.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.AppSession`3.Close">
            <summary>
            Closes this session.
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.AppSession`3.TrySend(System.String)">
            <summary>
            Try to send the message to client.
            </summary>
            <param name="message">The message which will be sent.</param>
            <returns>Indicate whether the message was pushed into the sending queue</returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppSession`3.Send(System.String)">
            <summary>
            Sends the message to client.
            </summary>
            <param name="message">The message which will be sent.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.AppSession`3.TrySend(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Try to send the data to client.
            </summary>
            <param name="data">The data which will be sent.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns>Indicate whether the message was pushed into the sending queue</returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppSession`3.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends the data to client.
            </summary>
            <param name="data">The data which will be sent.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.AppSession`3.TrySend(System.ArraySegment{System.Byte})">
            <summary>
            Try to send the data segment to client.
            </summary>
            <param name="segment">The segment which will be sent.</param>
            <returns>Indicate whether the message was pushed into the sending queue</returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppSession`3.Send(System.ArraySegment{System.Byte})">
            <summary>
            Sends the data segment to client.
            </summary>
            <param name="segment">The segment which will be sent.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.AppSession`3.TrySend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>
            Try to send the data segments to client.
            </summary>
            <param name="segments">The segments.</param>
            <returns>Indicate whether the message was pushed into the sending queue; if it returns false, the sending queue may be full or the socket is not connected</returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppSession`3.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>
            Sends the data segments to client.
            </summary>
            <param name="segments">The segments.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.AppSession`3.Send(System.String,System.Object[])">
            <summary>
            Sends the response.
            </summary>
            <param name="message">The message which will be sent.</param>
            <param name="paramValues">The parameter values.</param>
        </member>
        <member name="P:SuperSocket.SocketBase.AppSession`3.AppServer">
            <summary>
            Gets the app server instance assosiated with the session.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.AppSession`3.SuperSocket#SocketBase#IAppSession#AppServer">
            <summary>
            Gets the app server instance assosiated with the session.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.AppSession`3.Charset">
            <summary>
            Gets or sets the charset which is used for transfering text message.
            </summary>
            <value>
            The charset.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.AppSession`3.Items">
            <summary>
            Gets the items dictionary, only support 10 items maximum
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.AppSession`3.Connected">
            <summary>
            Gets a value indicating whether this <see cref="T:SuperSocket.SocketBase.IAppSession"/> is connected.
            </summary>
            <value>
              <c>true</c> if connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.AppSession`3.PrevCommand">
            <summary>
            Gets or sets the previous command.
            </summary>
            <value>
            The prev command.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.AppSession`3.CurrentCommand">
            <summary>
            Gets or sets the current executing command.
            </summary>
            <value>
            The current command.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.AppSession`3.SecureProtocol">
            <summary>
            Gets or sets the secure protocol of transportation layer.
            </summary>
            <value>
            The secure protocol.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.AppSession`3.LocalEndPoint">
            <summary>
            Gets the local listening endpoint.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.AppSession`3.RemoteEndPoint">
            <summary>
            Gets the remote endpoint of client.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.AppSession`3.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.AppSession`3.LastActiveTime">
            <summary>
            Gets or sets the last active time of the session.
            </summary>
            <value>
            The last active time.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.AppSession`3.StartTime">
            <summary>
            Gets the start time of the session.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.AppSession`3.SessionID">
            <summary>
            Gets the session ID.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.AppSession`3.SocketSession">
            <summary>
            Gets the socket session of the AppSession.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.AppSession`3.Config">
            <summary>
            Gets the config of the server.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.AppSession`3.SuperSocket#SocketBase#IThreadExecutingContext#PreferedThreadId">
            <summary>
            Gets or sets the prefered executing thread's id.
            </summary>
            <value>
            The prefered thread id.
            </value>
        </member>
        <member name="T:SuperSocket.SocketBase.AppSession`1">
            <summary>
            AppServer basic class for whose request infoe type is StringPackageInfo
            </summary>
            <typeparam name="TAppSession">The type of the app session.</typeparam>
        </member>
        <member name="M:SuperSocket.SocketBase.AppSession`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.AppSession`1"/> class.
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.AppSession`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.AppSession`1"/> class.
            </summary>
            <param name="appendNewLineForResponse">if set to <c>true</c> [append new line for response].</param>
        </member>
        <member name="M:SuperSocket.SocketBase.AppSession`1.HandleUnknownRequest(SuperSocket.ProtoBase.StringPackageInfo)">
            <summary>
            Handles the unknown request.
            </summary>
            <param name="requestInfo">The request info.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.AppSession`1.ProcessSendingMessage(System.String)">
            <summary>
            Processes the sending message.
            </summary>
            <param name="rawMessage">The raw message.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppSession`1.Send(System.String)">
            <summary>
            Sends the specified message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.AppSession`1.Send(System.String,System.Object[])">
            <summary>
            Sends the response.
            </summary>
            <param name="message">The message.</param>
            <param name="paramValues">The param values.</param>
            <returns>Indicate whether the message was pushed into the sending queue</returns>
        </member>
        <member name="T:SuperSocket.SocketBase.AppSession">
            <summary>
            AppServer basic class for whose request infoe type is StringPackageInfo
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.Command.StringCommandBase`1">
            <summary>
            A command type for whose request info type is StringPackageInfo
            </summary>
            <typeparam name="TAppSession">The type of the app session.</typeparam>
        </member>
        <member name="T:SuperSocket.SocketBase.Command.StringCommandBase">
            <summary>
            A command type for whose request info type is StringPackageInfo
            </summary>
        </member>
        <member name="T:SuperSocket.SocketBase.StatusInfoCollection">
            <summary>
            Status information collection
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.StatusInfoCollection.GetValue``1(System.String,``0)">
            <summary>
            Gets the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="P:SuperSocket.SocketBase.StatusInfoCollection.Values">
            <summary>
            Gets the values.
            </summary>
            <value>
            The values.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.StatusInfoCollection.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.StatusInfoCollection.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
            <value>
            The tag.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.StatusInfoCollection.CollectedTime">
            <summary>
            Gets or sets the collected time.
            </summary>
            <value>
            The collected time.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.StatusInfoCollection.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified name.
            </summary>
            <value>
            The <see cref="T:System.Object"/>.
            </value>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:SuperSocket.SocketBase.Utils.ITransactionGroup">
            <summary>
            The interface for group contains many transactional items
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Utils.ITransactionGroup.RegisterItem(SuperSocket.SocketBase.Utils.ITransactionItem)">
            <summary>
            Registers the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.Utils.ITransactionGroup.Commit">
            <summary>
            Commits this transaction.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Utils.ITransactionGroup.Items">
            <summary>
            Gets all the transaction items.
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="T:SuperSocket.SocketBase.Utils.LightweightTransaction">
            <summary>
            The light weight transaction
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Utils.LightweightTransaction.RegisterItem(SuperSocket.SocketBase.Utils.ITransactionItem)">
            <summary>
            Registers the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.Utils.LightweightTransaction.Commit">
            <summary>
            Commits this transaction.
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Utils.LightweightTransaction.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:SuperSocket.SocketBase.Utils.LightweightTransaction"/> class.
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Utils.LightweightTransaction.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:SuperSocket.SocketBase.Utils.LightweightTransaction.Items">
            <summary>
            Gets all the transaction items.
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="T:SuperSocket.SocketBase.Utils.SendingQueue">
            <summary>
            SendingQueue
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Utils.SendingQueue.#ctor(System.ArraySegment{System.Byte}[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Utils.SendingQueue"/> class.
            </summary>
            <param name="globalQueue">The global queue.</param>
            <param name="offset">The offset.</param>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.Utils.SendingQueue.Enqueue(System.ArraySegment{System.Byte},System.UInt16)">
            <summary>
            Enqueues the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="trackID">The track ID.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.Utils.SendingQueue.Enqueue(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.UInt16)">
            <summary>
            Enqueues the specified items.
            </summary>
            <param name="items">The items.</param>
            <param name="trackID">The track ID.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.SocketBase.Utils.SendingQueue.StopEnqueue">
            <summary>
            Stops the enqueue, and then wait all current excueting enqueu threads exit.
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Utils.SendingQueue.StartEnqueue">
            <summary>
            Starts to allow enqueue.
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Utils.SendingQueue.IndexOf(System.ArraySegment{System.Byte})">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:SuperSocket.SocketBase.Utils.SendingQueue.Insert(System.Int32,System.ArraySegment{System.Byte})">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:SuperSocket.SocketBase.Utils.SendingQueue.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:SuperSocket.SocketBase.Utils.SendingQueue.Add(System.ArraySegment{System.Byte})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:SuperSocket.SocketBase.Utils.SendingQueue.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:SuperSocket.SocketBase.Utils.SendingQueue.Contains(System.ArraySegment{System.Byte})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:SuperSocket.SocketBase.Utils.SendingQueue.CopyTo(System.ArraySegment{System.Byte}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.Utils.SendingQueue.Remove(System.ArraySegment{System.Byte})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:SuperSocket.SocketBase.Utils.SendingQueue.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:SuperSocket.SocketBase.Utils.SendingQueue.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:SuperSocket.SocketBase.Utils.SendingQueue.InternalTrim(System.Int32)">
            <summary>
            Trim the internal segments at the begining by the binary data size.
            </summary>
            <param name="offset">The binary data size should be trimed at the begining.</param>
        </member>
        <member name="P:SuperSocket.SocketBase.Utils.SendingQueue.TrackID">
            <summary>
            Gets the track ID.
            </summary>
            <value>
            The track ID.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Utils.SendingQueue.GlobalQueue">
            <summary>
            Gets the global queue.
            </summary>
            <value>
            The global queue.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Utils.SendingQueue.Offset">
            <summary>
            Gets the offset.
            </summary>
            <value>
            The offset.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Utils.SendingQueue.Capacity">
            <summary>
            Gets the capacity.
            </summary>
            <value>
            The capacity.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Utils.SendingQueue.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="P:SuperSocket.SocketBase.Utils.SendingQueue.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:SuperSocket.SocketBase.Utils.SendingQueue.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="P:SuperSocket.SocketBase.Utils.SendingQueue.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
        </member>
        <member name="T:SuperSocket.SocketBase.Utils.SendingQueueSourceCreator">
            <summary>
            SendingQueue Source Creator
            </summary>
        </member>
        <member name="M:SuperSocket.SocketBase.Utils.SendingQueueSourceCreator.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.SocketBase.Utils.SendingQueueSourceCreator"/> class.
            </summary>
            <param name="sendingQueueSize">Size of the sending queue.</param>
        </member>
        <member name="M:SuperSocket.SocketBase.Utils.SendingQueueSourceCreator.Create(System.Int32)">
            <summary>
            Creates the specified quantity of sendingQueues.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
    </members>
</doc>
