<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SuperSocket.Common</name>
    </assembly>
    <members>
        <member name="T:SuperSocket.Common.AssemblyUtil">
            <summary>
            Assembly Util Class
            </summary>
        </member>
        <member name="M:SuperSocket.Common.AssemblyUtil.CreateInstance``1(System.String)">
            <summary>
            Creates the instance from type name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.Common.AssemblyUtil.CreateInstance``1(System.String,System.Object[])">
            <summary>
            Creates the instance from type name and parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.Common.AssemblyUtil.GetType(System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets the type by the full name, also return matched generic type without checking generic type parameters in the name.
            </summary>
            <param name="fullTypeName">Full name of the type.</param>
            <param name="throwOnError">if set to <c>true</c> [throw on error].</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.Common.AssemblyUtil.GetImplementTypes``1(System.Reflection.Assembly)">
            <summary>
            Gets the implement types from assembly.
            </summary>
            <typeparam name="TBaseType">The type of the base type.</typeparam>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.Common.AssemblyUtil.GetImplementedObjectsByInterface``1(System.Reflection.Assembly)">
            <summary>
            Gets the implemented objects by interface.
            </summary>
            <typeparam name="TBaseInterface">The type of the base interface.</typeparam>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.Common.AssemblyUtil.GetImplementedObjectsByInterface``1(System.Reflection.Assembly,System.Type)">
            <summary>
            Gets the implemented objects by interface.
            </summary>
            <typeparam name="TBaseInterface">The type of the base interface.</typeparam>
            <param name="assembly">The assembly.</param>
            <param name="targetType">Type of the target.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.Common.AssemblyUtil.BinaryClone``1(``0)">
            <summary>
            Clone object in binary format.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.Common.AssemblyUtil.CopyPropertiesTo``1(``0,``0)">
            <summary>
            Copies the properties of one object to another object.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:SuperSocket.Common.AssemblyUtil.MakeCopy``1(System.Object)">
            <summary>
            Makes a copy of the source object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source object.</param>
            <returns>return the new copy of this source object</returns>
        </member>
        <member name="M:SuperSocket.Common.AssemblyUtil.MakeCopy``1(System.Collections.IEnumerable)">
            <summary>
            Makes a new copy of the source enumerable source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The enumerable source.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.Common.AssemblyUtil.GetAssembliesFromString(System.String)">
            <summary>
            Gets the assemblies from string.
            </summary>
            <param name="assemblyDef">The assembly def.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.Common.AssemblyUtil.GetAssembliesFromStrings(System.String[])">
            <summary>
            Gets the assemblies from strings.
            </summary>
            <param name="assemblies">The assemblies.</param>
            <returns></returns>
        </member>
        <member name="T:SuperSocket.Common.ConfigurationElementBase">
            <summary>
            ConfigurationElementBase
            </summary>
        </member>
        <member name="M:SuperSocket.Common.ConfigurationElementBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.Common.ConfigurationElementBase"/> class.
            </summary>
        </member>
        <member name="M:SuperSocket.Common.ConfigurationElementBase.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.Common.ConfigurationElementBase"/> class.
            </summary>
            <param name="nameRequired">if set to <c>true</c> [name required].</param>
        </member>
        <member name="M:SuperSocket.Common.ConfigurationElementBase.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Reads XML from the configuration file.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> that reads from the configuration file.</param>
            <param name="serializeCollectionKey">true to serialize only the collection key properties; otherwise, false.</param>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">The element to read is locked.- or -An attribute of the current node is not recognized.- or -The lock status of the current node cannot be determined.  </exception>
        </member>
        <member name="M:SuperSocket.Common.ConfigurationElementBase.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            Gets a value indicating whether an unknown attribute is encountered during deserialization.
            </summary>
            <param name="name">The name of the unrecognized attribute.</param>
            <param name="value">The value of the unrecognized attribute.</param>
            <returns>
            true when an unknown attribute is encountered while deserializing; otherwise, false.
            </returns>
        </member>
        <member name="M:SuperSocket.Common.ConfigurationElementBase.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
            <summary>
            Gets a value indicating whether an unknown element is encountered during deserialization.
            </summary>
            <param name="elementName">The name of the unknown subelement.</param>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> being used for deserialization.</param>
            <returns>
            true when an unknown element is encountered while deserializing; otherwise, false.
            </returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">The element identified by <paramref name="elementName"/> is locked.- or -One or more of the element's attributes is locked.- or -<paramref name="elementName"/> is unrecognized, or the element has an unrecognized attribute.- or -The element has a Boolean attribute with an invalid value.- or -An attempt was made to deserialize a property more than once.- or -An attempt was made to deserialize a property that is not a valid member of the element.- or -The element cannot contain a CDATA or text element.</exception>
        </member>
        <member name="P:SuperSocket.Common.ConfigurationElementBase.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:SuperSocket.Common.ConfigurationElementBase.Options">
            <summary>
            Gets the options.
            </summary>
        </member>
        <member name="P:SuperSocket.Common.ConfigurationElementBase.OptionElements">
            <summary>
            Gets the option elements.
            </summary>
        </member>
        <member name="T:SuperSocket.Common.ConfigurationExtension">
            <summary>
            Configuration extension class
            </summary>
        </member>
        <member name="M:SuperSocket.Common.ConfigurationExtension.GetValue(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Gets the value from namevalue collection by key.
            </summary>
            <param name="collection">The collection.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.Common.ConfigurationExtension.GetValue(System.Collections.Specialized.NameValueCollection,System.String,System.String)">
            <summary>
            Gets the value from namevalue collection by key.
            </summary>
            <param name="collection">The collection.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.Common.ConfigurationExtension.Deserialize``1(``0,System.Xml.XmlReader)">
            <summary>
            Deserializes the specified configuration section.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="section">The section.</param>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:SuperSocket.Common.ConfigurationExtension.GetChildConfig``1(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Gets the child config.
            </summary>
            <typeparam name="TConfig">The type of the config.</typeparam>
            <param name="childElements">The child elements.</param>
            <param name="childConfigName">Name of the child config.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.Common.ConfigurationExtension.GetConfigSource(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the config source path.
            </summary>
            <param name="config">The config.</param>
            <returns></returns>
        </member>
        <member name="T:SuperSocket.Common.DictionaryExtension">
            <summary>
            Extension class for IDictionary
            </summary>
        </member>
        <member name="M:SuperSocket.Common.DictionaryExtension.GetValue``1(System.Collections.Generic.IDictionary{System.Object,System.Object},System.Object)">
            <summary>
            Gets the value by key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.Common.DictionaryExtension.GetValue``1(System.Collections.Generic.IDictionary{System.Object,System.Object},System.Object,``0)">
            <summary>
            Gets the value by key and default value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="T:SuperSocket.Common.ErrorEventArgs">
            <summary>
            EventArgs for error and exception
            </summary>
        </member>
        <member name="M:SuperSocket.Common.ErrorEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.Common.ErrorEventArgs"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:SuperSocket.Common.ErrorEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperSocket.Common.ErrorEventArgs"/> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:SuperSocket.Common.ErrorEventArgs.Exception">
            <summary>
            Gets the exception.
            </summary>
        </member>
        <member name="T:SuperSocket.Common.GenericConfigurationElementCollectionBase`2">
            <summary>
            GenericConfigurationElementCollectionBase
            </summary>
            <typeparam name="TConfigElement">The type of the config element.</typeparam>
            <typeparam name="TConfigInterface">The type of the config interface.</typeparam>
        </member>
        <member name="M:SuperSocket.Common.GenericConfigurationElementCollectionBase`2.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:SuperSocket.Common.GenericConfigurationElementCollectionBase`2.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:SuperSocket.Common.GenericConfigurationElementCollectionBase`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:SuperSocket.Common.GenericConfigurationElementCollectionBase`2.Item(System.Int32)">
            <summary>
            Gets or sets a property, attribute, or child element of this configuration element.
            </summary>
            <returns>The specified property, attribute, or child element</returns>
        </member>
        <member name="T:SuperSocket.Common.GenericConfigurationElementCollection`2">
            <summary>
            GenericConfigurationElementCollection
            </summary>
            <typeparam name="TConfigElement">The type of the config element.</typeparam>
            <typeparam name="TConfigInterface">The type of the config interface.</typeparam>
        </member>
        <member name="M:SuperSocket.Common.GenericConfigurationElementCollection`2.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="T:SuperSocket.Common.Platform">
            <summary>
            This class is designed for detect platform attribute in runtime
            </summary>
        </member>
        <member name="P:SuperSocket.Common.Platform.SupportSocketIOControlByCodeEnum">
            <summary>
            Gets a value indicating whether [support socket IO control by code enum].
            </summary>
            <value>
            	<c>true</c> if [support socket IO control by code enum]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SuperSocket.Common.Platform.IsMono">
            <summary>
            Gets a value indicating whether this instance is mono.
            </summary>
            <value>
              <c>true</c> if this instance is mono; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SuperSocket.Common.SocketEx">
            <summary>
            Socket extension class
            </summary>
        </member>
        <member name="M:SuperSocket.Common.SocketEx.SafeClose(System.Net.Sockets.Socket)">
            <summary>
            Close the socket safely.
            </summary>
            <param name="socket">The socket.</param>
        </member>
        <member name="M:SuperSocket.Common.SocketEx.SendData(System.Net.Sockets.Socket,System.Byte[])">
            <summary>
            Sends the data.
            </summary>
            <param name="client">The client.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:SuperSocket.Common.SocketEx.SendData(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends the data.
            </summary>
            <param name="client">The client.</param>
            <param name="data">The data.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
        </member>
        <member name="T:SuperSocket.Common.StringExtension">
            <summary>
            String extension class
            </summary>
            <summary>
            String extension
            </summary>
        </member>
        <member name="M:SuperSocket.Common.StringExtension.ToInt32(System.String)">
            <summary>
            Convert string to int32.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.Common.StringExtension.ToInt32(System.String,System.Int32)">
            <summary>
            Convert string to int32.
            </summary>
            <param name="source">The source.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.Common.StringExtension.ToLong(System.String)">
            <summary>
            Convert string to long.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.Common.StringExtension.ToLong(System.String,System.Int64)">
            <summary>
            Convert string to long.
            </summary>
            <param name="source">The source.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.Common.StringExtension.ToShort(System.String)">
            <summary>
            Convert string to short.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.Common.StringExtension.ToShort(System.String,System.Int16)">
            <summary>
            Convert string to short.
            </summary>
            <param name="source">The source.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.Common.StringExtension.ToDecimal(System.String)">
            <summary>
            Convert string to decimal.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.Common.StringExtension.ToDecimal(System.String,System.Decimal)">
            <summary>
            Convert string to decimal.
            </summary>
            <param name="source">The source.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.Common.StringExtension.ToDateTime(System.String)">
            <summary>
            Convert string to date time.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.Common.StringExtension.ToDateTime(System.String,System.DateTime)">
            <summary>
            Convert string to date time.
            </summary>
            <param name="source">The source.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.Common.StringExtension.ToBoolean(System.String)">
            <summary>
            Convert string to boolean.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.Common.StringExtension.ToBoolean(System.String,System.Boolean)">
            <summary>
            Convert string tp boolean.
            </summary>
            <param name="source">The source.</param>
            <param name="defaultValue">if set to <c>true</c> [default value].</param>
            <returns></returns>
        </member>
        <member name="M:SuperSocket.Common.StringExtension.TryParseEnum``1(System.String,System.Boolean,``0@)">
            <summary>
            Tries parse string to enum.
            </summary>
            <typeparam name="T">the enum type</typeparam>
            <param name="value">The value.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <param name="enumValue">The enum value.</param>
            <returns></returns>
        </member>
        <member name="T:SuperSocket.Common.TheadPoolEx">
            <summary>
            Thread pool extension class
            </summary>
        </member>
        <member name="M:SuperSocket.Common.TheadPoolEx.ResetThreadPool(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Resets the thread pool.
            </summary>
            <param name="maxWorkingThreads">The max working threads.</param>
            <param name="maxCompletionPortThreads">The max completion port threads.</param>
            <param name="minWorkingThreads">The min working threads.</param>
            <param name="minCompletionPortThreads">The min completion port threads.</param>
            <returns></returns>
        </member>
    </members>
</doc>
